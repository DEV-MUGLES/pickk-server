# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddItemPriceInput {
  endAt: DateTime
  isActive: Boolean
  isCrawlUpdating: Boolean!
  originalPrice: Int!
  pickkDiscountAmount: Int
  pickkDiscountRate: Int!
  sellPrice: Int!
  startAt: DateTime
}

input AddItemSizeChartInput {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  waistWidth: Float
  watchBandDepth: Float
}

input AddItemUrlInput {
  isPrimary: Boolean!
  url: String!
}

input AnswerInquiryInput {
  """최대 길이 255"""
  content: String!

  """표시될 답변작성자 이름. 최대 길이 30"""
  displayAuthor: String!
}

"""애플 로그인시 사용됩니다. [App, Web]"""
enum AppleClientType {
  App
  Web
}

"""은행 식별 코드입니다. InicisBankCode와 값이 같습니다."""
enum BankCode {
  AbnAmro
  BcCard
  Boa
  Busan
  ChBank
  Chohung
  Citi
  Commercial
  Cu
  Daegu
  Deutsche
  EPost
  ExShinhan
  Hana
  Hanil
  Hanmi
  Housing
  Hsbc
  Ibk
  Jeju
  Jeonbuk
  JpMorgan
  KBank
  KakaoBank
  KakaoMoney
  Kangwon
  Kb
  Kdb
  Keb
  Kwangju
  Kyongnam
  LPoint
  MitsubishiTokyo
  MutualSavings
  NaverPoint
  NhBank
  Nonghyup
  Payco
  Peace
  Sc
  Seoul
  ShBank
  Shinan
  Shinhan
  Shinsegae
  Sj
  SsgMoney
  TossMoney
  Woori
}

type BaseOrderOutput {
  """[MODEL ONLY]"""
  brands: [OrderBrand!]!
  createdAt: DateTime!
  failedAt: DateTime

  """[MODEL ONLY]"""
  id: String!

  """(PK) 주문고유번호. YYMMDDHHmmssSSS + NN(00~99)"""
  merchantUid: String!
  paidAt: DateTime
  payMethod: PayMethod
  payingAt: DateTime
  refundAccount: OrderRefundAccount
  refundRequests: [RefundRequest!]!
  status: OrderStatus!
  totalCouponDiscountAmount: Int!
  totalItemFinalPrice: Int!
  totalPayAmount: Int!
  totalShippingFee: Int!
  totalUsedPointAmount: Int!
  updatedAt: DateTime!
  userId: Int
  vbankDodgedAt: DateTime
  vbankReadyAt: DateTime
}

type Brand {
  createdAt: DateTime!
  description: String
  id: Int!
  imageUrl: String
  nameEng: String
  nameKor: String!
  seller: Seller
  updatedAt: DateTime!
}

input BulkShipOrderItemInput {
  shipOrderItemInputs: [ExtendedShipOrderItemInput!]!
}

input BulkUpdateItemInput {
  isMdRecommended: Boolean
  isSellable: Boolean
  majorCategoryId: Int
  minorCategoryId: Int
}

type Campaign {
  createdAt: DateTime!
  endAt: DateTime!
  id: Int!

  """[MODEL ONLY]"""
  isActive: Boolean!
  items: [Item!]!

  """적용 정산률 (0~100)"""
  rate: Int!
  startAt: DateTime!
  updatedAt: DateTime!
}

input CancelOrderInput {
  orderItemMerchantUids: [String!]!

  """취소 사유"""
  reason: String!
}

enum CardCode {
  Amex
  Bc
  Diners
  Hanask
  Hanmi
  Hyundai
  Jcb
  KakaoMoney
  Kb
  Keb
  LPoint
  Lotte
  Master
  NaverPoint
  Nh
  Payco
  Samsung
  Shinhan
  SsgMoney
  TossMoney
  Visa
}

type Cart {
  """CartItem을 브랜드 단위로 묶은 것"""
  cartBrands: [CartBrand!]!
  cartItems: [CartItem!]!

  """userId와 동일한 더미값입니다."""
  id: Int!
}

type CartBrand {
  brand: Brand!
  cartItems: [CartItem!]!
  sellerShippingPolicy: SellerShippingPolicy!
}

type CartItem {
  createdAt: DateTime!
  id: Int!

  """[MODEL ONLY]"""
  isAdjusted: Boolean
  product: Product!
  productId: Int!
  quantity: Int!
  recommendDigest: Digest
  recommendDigestId: Int
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input CheckPinInput {
  code: String!
  phoneNumber: String!
}

type Comment {
  content: String
  contentUpdatedAt: DateTime
  createdAt: DateTime!
  id: Int!
  isContentUpdated: Boolean!
  isDeleted: Boolean!

  """[MODEL ONLY]"""
  isLiking: Boolean

  """[MODEL ONLY]"""
  isMine: Boolean
  likeCount: Int!
  mentionedUser: User
  mentionedUserId: Int
  ownerId: Int!
  ownerType: CommentOwnerType!
  parent: Comment
  parentId: Int
  replies: [Comment!]!
  updatedAt: DateTime!
  user: User
  userId: Int
}

input CommentFilter {
  ownerId: Int
  ownerType: CommentOwnerType
  parentIdIsNull: Boolean
}

"""댓글 연관 객체 분류입니다."""
enum CommentOwnerType {
  Digest
  Look
  Video
}

type Coupon {
  createdAt: DateTime!
  id: Int!
  spec: CouponSpecification
  specId: Int!
  status: CouponStatus
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type CouponSpecification {
  """이 값으로 클라이언트에서 필터링 해주세요."""
  availableAt: DateTime
  brand: Brand
  brandId: Float
  createdAt: DateTime!
  discountAmount: Int

  """1~99 정수"""
  discountRate: Int
  expireAt: DateTime!
  id: Int!
  maximumDiscountPrice: Int
  minimumForUse: Int

  """최대 30자"""
  name: String!
  type: CouponType!
  updatedAt: DateTime!
}

"""쿠폰 상태입니다. 사용가능(Ready), 사용됨(Applied)"""
enum CouponStatus {
  Applied
  Ready
}

"""쿠폰 분류입니다. 정률적용(Rate), 정액적용(Amount)"""
enum CouponType {
  Amount
  Rate
}

type Courier {
  code: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  phoneNumber: String!
  returnReserveUrl: String!
  updatedAt: DateTime!
}

input CreateCartItemInput {
  productId: Int!
  quantity: Int!
  recommendDigestId: Int
}

input CreateCommentInput {
  content: String
  mentionedUserId: Int
  ownerId: Int!
  ownerType: CommentOwnerType!
  parentId: Int
}

input CreateCouponInput {
  specId: Int!
  userId: Int!
}

input CreateCouponSpecificationInput {
  """이 값으로 클라이언트에서 필터링 해주세요."""
  availableAt: DateTime
  brandId: Float
  discountAmount: Int

  """1~99 정수"""
  discountRate: Int
  expireAt: DateTime!
  maximumDiscountPrice: Int
  minimumForUse: Int

  """최대 30자"""
  name: String!
  type: CouponType!
}

input CreateCourierInput {
  code: String!
  name: String!
  phoneNumber: String!
  returnReserveUrl: String!
}

input CreateDigestInput {
  """최대 길이 65000자"""
  content: String
  imageUrls: [String!]!
  itemId: Int
  itemPropertyValueIds: [Int!]!
  rating: Rating
  size: String!

  """최대 길이 127"""
  title: String
}

input CreateInquiryInput {
  """알림톡 받을 전화번호 (11글자)"""
  contactPhoneNumber: String!

  """최대 길이 255"""
  content: String!
  isSecret: Boolean!
  itemId: Int
  orderItemMerchantUid: String

  """최대 길이 100"""
  title: String!
  type: InquiryType!
}

input CreateItemDetailImageInput {
  urls: [String!]!
}

input CreateItemOpionValueInput {
  name: String!
  priceVariant: Int!
}

input CreateItemOptionInput {
  name: String!
  values: [CreateItemOpionValueInput!]!
}

input CreateItemOptionSetInput {
  options: [CreateItemOptionInput!]!
}

input CreateLookDigestInput {
  itemId: Int!
  size: String!
}

input CreateLookInput {
  digests: [CreateLookDigestInput!]!
  imageUrls: [String!]!
  styleTagIds: [Int!]!

  """최대 길이 127"""
  title: String!
}

input CreateOrderVbankReceiptInput {
  bankCode: BankCode
  due: DateTime

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String
  ownerName: String
}

input CreateProductShippingReservePolicyInput {
  """예약발송 예정일"""
  estimatedShippingBegginDate: DateTime!

  """예약설정된 재고. 예약발송일이 되면, 예약발송 상태는 자동으로 종료되며, 잔여 예약발송 재고는 일반 재고에 합산됩니다."""
  stock: Int!
}

input CreateRefundAccountInput {
  bankCode: BankCode!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
}

input CreateSellerClaimPolicyInput {
  description: String
  fee: Int!
  isExchangable: Boolean!
  isRefundable: Boolean!

  """담당자 번호"""
  phoneNumber: String!

  """담당자 이름"""
  picName: String!
}

input CreateSellerCrawlPolicyInput {
  """크롤링된 새로운 아이템들을 추가 등록하는가"""
  isInspectingNew: Boolean!

  """기존 아이템들의 이름/가격을 업데이트하는가"""
  isUpdatingItems: Boolean!
}

input CreateSellerCrawlStrategyInput {
  baseUrl: String!
  codeRegex: String!
  itemsSelector: String!
  pageParam: String
  pagination: Boolean!

  """'<>'으로 join된 상태다."""
  startPathNamesJoin: String!
}

input CreateSellerInput {
  brandId: Int!
  businessCode: String
  businessName: String
  claimPolicyInput: CreateSellerClaimPolicyInput!
  courierId: Int!
  crawlPolicyInput: CreateSellerCrawlPolicyInput!
  crawlStrategyInput: CreateSellerCrawlStrategyInput!
  csNotiPhoneNumber: String
  email: String
  kakaoTalkCode: String
  mailOrderBusinessCode: String
  operationTimeMessage: String
  orderNotiPhoneNumber: String
  phoneNumber: String

  """최대 20자"""
  representativeName: String
  returnAddressInput: CreateSellerReturnAddressInput!
  saleStrategyInput: CreateSellerSaleStrategyInput!
  settlePolicyInput: CreateSellerSettlePolicyInput
  shippingPolicyInput: CreateSellerShippingPolicyInput!
  userId: Int!
}

input CreateSellerReturnAddressInput {
  baseAddress: String!
  detailAddress: String!
  name: String!
  phoneNumber: String!
  postalCode: String!
  receiverName: String!
}

input CreateSellerSaleStrategyInput {
  canUseCoupon: Boolean!
  canUseMileage: Boolean!
  pickkDiscountRate: Int!
}

input CreateSellerSettleAccountInput {
  bankCode: BankCode!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
}

input CreateSellerSettlePolicyInput {
  """정산 받을 계좌"""
  accountInput: CreateSellerSettleAccountInput

  """세금계산서 수령이메일"""
  email: String!

  """담당자 번호"""
  phoneNumber: String!
  picName: String!

  """기본 정산율"""
  rate: Int!
}

input CreateSellerShippingPolicyInput {
  description: String
  fee: Int!
  minimumAmountForFree: Int!
}

input CreateShipmentInput {
  courierId: Int!
  trackCode: String!
}

input CreateShippingAddressInput {
  baseAddress: String!
  detailAddress: String!
  isPrimary: Boolean!
  name: String!
  phoneNumber: String!
  postalCode: String!
  receiverName: String!
}

input CreateUserInput {
  avatarUrl: String
  code: String
  email: String
  height: Int
  name: String

  """최대 11자"""
  nickname: String!
  oauthCode: String
  oauthProvider: UserProviderType
  password: String
  weight: Int
}

input CreateVideoDigestInput {
  itemId: Int
  itemPropertyValueIds: [Int!]
  rating: Rating
  size: String!
  timestampEndSecond: Int
  timestampStartSecond: Int

  """최대 길이 127"""
  title: String
}

input CreateVideoInput {
  digests: [CreateVideoDigestInput!]!

  """최대 길이 127"""
  title: String!

  """최대 길이 40"""
  youtubeCode: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Digest {
  commentCount: Int!

  """최대 길이 65000자"""
  content: String
  createdAt: DateTime!
  hitCount: Int!
  id: Int!
  images: [DigestImage!]!

  """[MODEL ONLY]"""
  isLiking: Boolean

  """[MODEL ONLY]"""
  isMine: Boolean
  item: Item
  itemId: Int
  itemPropertyValues: [ItemPropertyValue!]!
  likeCount: Int!
  look: Look
  lookId: Int
  order: Float!
  rating: Rating
  score: Float!
  size: String!
  timestampEndSecond: Int
  timestampStartSecond: Int

  """최대 길이 127"""
  title: String
  updatedAt: DateTime!
  user: User
  userId: Int
  video: Video
  videoId: Int
}

input DigestFilter {
  idIn: [Int!]
  item: DigestItemFilter
  itemId: Int
  itemIdIn: [Int!]
  orderBy: String = "id"
  ratingIsNull: Boolean
  user: DigestUserFilter
  userId: Int
  userIdIn: [Int!]
}

type DigestImage {
  angle: Int!
  createdAt: DateTime!
  digest: Digest!
  digestId: Int!
  key: String!
  order: Float!
  url: String!
}

input DigestItemFilter {
  """[CUSTOM]"""
  brandId: Int

  """[CUSTOM]"""
  majorCategoryId: Int

  """[CUSTOM]"""
  minorCategoryId: Int
}

input DigestUserFilter {
  """[CUSTOM]"""
  heightBetween: [Int!]
}

type DigestsExhibition {
  createdAt: DateTime!
  digests: [Digest!]!
  id: Int!
  updatedAt: DateTime!
}

type ExchangeRequest {
  confirmedAt: DateTime
  faultOf: OrderClaimFaultOf!
  isProcessDelaying: Boolean!
  isSettled: Boolean!
  itemName: String!

  """orderItemMerchantUid와 동일"""
  merchantUid: String!
  orderItem: OrderItem!
  orderItemMerchantUid: String!
  pickShipment: Shipment
  pickShipmentId: Int

  """수거 완료 시점"""
  pickedAt: DateTime
  processDelayedAt: DateTime!
  product: Product
  productId: Int
  productVariantName: String!
  quantity: Int!
  reShipment: Shipment
  reShipmentId: Int

  """255자 이내로 적어주세요"""
  reason: String!

  """255자 이내로 적어주세요"""
  rejectReason: String
  rejectedAt: DateTime
  requestedAt: DateTime!
  reshippedAt: DateTime
  reshippingAt: DateTime
  seller: Seller
  sellerId: Int
  settledAt: DateTime

  """결제된 교환 배송비"""
  shippingFee: Int!
  status: ExchangeRequestStatus!
  user: User
  userId: Int
}

input ExchangeRequestFilter {
  isProcessDelaying: Boolean
  merchantUidIn: [String!]
  orderItem: ExchangeRequestOrderItemFilter
  requestedAtBetween: [DateTime!]

  """재배송 완료일 (기간). 교환 완료와 동일한 의미로 사용됩니다."""
  reshippedAtBetween: [DateTime!]

  """주문상품번호, 회수 운송장번호, 재배송 운송장번호로 검색"""
  search: String
  sellerId: Int
  status: ExchangeRequestStatus
  statusIn: [ExchangeRequestStatus!]
}

input ExchangeRequestOrderItemFilter {
  paidAtBetween: [DateTime!]
}

"""교한신청 상태입니다."""
enum ExchangeRequestStatus {
  Pending
  Picked
  Rejected
  Requested
  Reshipped
  Reshipping
}

"""생성일 기준 3달 이내의 건들만 count합니다."""
type ExchangeRequestsCountOutput {
  """수거 완료"""
  Picked: Int!

  """교환 거부"""
  Rejected: Int!

  """교환 요청 (= 수거중)"""
  Requested: Int!

  """교환 배송 완료"""
  Reshipped: Int!

  """교환 배송 중"""
  Reshipping: Int!

  """sellerId와 동일한 값. Apollo Client 캐싱을 위해 존재합니다."""
  id: Int!
  lastUpdatedAt: DateTime!

  """교환 처리 지연 (지연중인 requested + picked)"""
  process_delayed: Int!
}

input ExtendedShipOrderItemInput {
  courierId: Int!
  merchantUid: String!
  trackCode: String!
}

input FindSaleStrategyInput {
  canUseCoupon: Boolean!
  canUseMileage: Boolean!
}

input GetAppleAuthCodeInput {
  clientType: AppleClientType!
  code: String!
}

"""조회수 누적 대상 객체 분류입니다."""
enum HitOwnerType {
  Digest
  Item
  Keyword
  Look
  Video
}

"""생성일 기준 3달 이내의 건들만 count합니다."""
type InquiriesCountOutput {
  """답변 지연 (생성일 5일 경과)"""
  delayed: Int!

  """sellerId와 동일한 값(or 0). Apollo Client 캐싱을 위해 존재합니다."""
  id: Int!
  lastUpdatedAt: DateTime!

  """미답변"""
  not_answered: Int!
}

type Inquiry {
  answers: [InquiryAnswer!]!

  """알림톡 받을 전화번호 (11글자)"""
  contactPhoneNumber: String!

  """최대 길이 255"""
  content: String!
  createdAt: DateTime!
  id: Int!
  isAnswered: Boolean!
  isSecret: Boolean!
  item: Item
  itemId: Int
  orderItem: OrderItem
  orderItemMerchantUid: String
  seller: Seller
  sellerId: Int

  """최대 길이 100"""
  title: String!
  type: InquiryType!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type InquiryAnswer {
  """최대 길이 255"""
  content: String!
  createdAt: DateTime!

  """표시될 답변작성자 이름. 최대 길이 30"""
  displayAuthor: String!
  from: InquiryAnswerFrom!
  id: Int!
  inquiry: Inquiry!
  inquiryId: Int!
  updatedAt: DateTime!
  user: User
  userId: Int
}

"""답변 작성 출처입니다. (Seller or Root)"""
enum InquiryAnswerFrom {
  Root
  Seller
}

input InquiryFilter {
  isAnswered: Boolean
  itemId: Int

  """주문상품번호로 검색 가능"""
  search: String
  sellerId: Int
  userId: Int
}

"""배송/사이즈/재입고/기타"""
enum InquiryType {
  Etc
  Restock
  Ship
  Size
}

type Item {
  brand: Brand!
  brandId: Int!
  campaigns: [Campaign!]
  createdAt: DateTime!
  description: String
  detailImages: [ItemDetailImage!]
  digestAverageRating: Float!
  digestCount: Int!
  digests: [Digest!]

  """[MODEL ONLY]"""
  finalPrice: Float!
  groupItems: [Item!]
  hitCount: Int!
  id: Int!
  imageUrl: String!
  isInfiniteStock: Boolean!
  isMdRecommended: Boolean!
  isPurchasable: Boolean!
  isSellable: Boolean!
  isSoldout: Boolean!
  majorCategory: ItemCategory
  majorCategoryId: Float
  minorCategory: ItemCategory
  minorCategoryId: Float
  name: String!
  options: [ItemOption!]

  """[MODEL ONLY]"""
  originalPrice: Float!

  """[MODEL ONLY]"""
  pickkDiscountRate: Float!
  prices: [ItemPrice!]!
  products: [Product!]
  providedCode: String
  salePolicy: ItemSalePolicy
  score: Float!

  """[MODEL ONLY]"""
  sellPrice: Float!

  """판매가능시점(=활성전환일)"""
  sellableAt: DateTime
  sizeChartMetaDatas: [ItemSizeChartMetaData!]
  sizeCharts: [ItemSizeChart!]
  updatedAt: DateTime!
  urls: [ItemUrl!]!
}

type ItemCategory {
  children: [ItemCategory!]!

  """최대 20자"""
  code: String!
  createdAt: DateTime!
  id: Int!

  """최대 20자"""
  name: String!
  parent: ItemCategory!
  updatedAt: DateTime!
}

type ItemDetailImage {
  angle: Int!
  createdAt: DateTime!
  itemId: Int!
  key: String!
  order: Int!
  url: String!
}

input ItemFilter {
  brandId: Int
  createdAtBetween: [DateTime!]
  createdAtLte: DateTime
  createdAtMte: DateTime
  idIn: [Int!]
  isMdRecommended: Boolean
  isPurchasable: Boolean
  isSellable: Boolean
  majorCategoryId: Float
  minorCategoryId: Float
  orderBy: String
  scoreMt: Float

  """아이템 이름(name)으로 검색합니다."""
  search: String
  sellableAtBetween: [DateTime!]
  sellableAtLte: DateTime
  sellableAtMte: DateTime
}

type ItemOption {
  createdAt: DateTime!
  id: Int!
  itemId: Int!
  name: String!
  order: Float!
  updatedAt: DateTime!
  values: [ItemOptionValue!]!
}

type ItemOptionValue {
  createdAt: DateTime!
  id: Int!
  itemOptionId: Int!
  name: String!
  order: Float!
  priceVariant: Int!
  updatedAt: DateTime!
}

type ItemPrice {
  createdAt: DateTime!
  displayPrice: Float
  endAt: DateTime
  finalPrice: Int!
  id: Int!
  isActive: Boolean!
  isBase: Boolean!
  isCrawlUpdating: Boolean!
  itemId: Int!
  originalPrice: Int!
  pickkDiscountAmount: Int
  pickkDiscountRate: Int!
  sellPrice: Int!
  startAt: DateTime
  unit: ItemPriceUnit
  updatedAt: DateTime!
}

"""
아이템의 가격 단위입니다. null인 경우 원화로 취급되며, 값을 가질 경우 적절한 displayPrice에 적절한 환율을 곱한 값으로 salePrice를 설정합니다.
"""
enum ItemPriceUnit {
  AUD
  CAD
  CNY
  EUR
  GBP
  JPY
  KRW
  USD
}

type ItemProperty {
  createdAt: DateTime!
  id: Int!
  minorCategory: ItemCategory!
  minorCategoryId: Int!
  name: String!
  updatedAt: DateTime!
  values: [ItemPropertyValue!]!
}

input ItemPropertyFilter {
  minorCategoryId: Int
}

type ItemPropertyValue {
  createdAt: DateTime!
  id: Int!
  name: String!

  """표시될 순서. 최소 0, 최대 255입니다."""
  order: Float!
  property: ItemProperty!
  propertyId: Int!
  updatedAt: DateTime!
}

type ItemSalePolicy {
  createdAt: DateTime!
  id: Int!
  isUsingQuantityLimit: Boolean!
  isUsingStock: Boolean!
  quantityLimit: Int!
  updatedAt: DateTime!
}

type ItemSizeChart {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  createdAt: DateTime!
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  id: Int!
  itemId: Int!
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  updatedAt: DateTime!
  waistWidth: Float
  watchBandDepth: Float
}

type ItemSizeChartMetaData {
  columnName: String!
  displayName: String!
}

type ItemUrl {
  createdAt: DateTime!
  id: Int!
  isAvailable: Boolean!
  isPrimary: Boolean!
  itemId: Int!
  updatedAt: DateTime!
  url: String!
}

type ItemsExhibition {
  createdAt: DateTime!
  id: Int!
  items: [Item!]!

  """최대 50자"""
  title: String!
  updatedAt: DateTime!
}

type ItemsGroup {
  createdAt: DateTime!
  groupItems: [ItemsGroupItem!]!
  id: Int!
  items: [Item!]!
  name: String!
  updatedAt: DateTime!
}

type ItemsGroupItem {
  createdAt: DateTime!
  group: ItemsGroup!
  id: Int!
  item: Item!
  order: Int!
  updatedAt: DateTime!
}

type ItemsPackage {
  """최대 50자"""
  code: String!
  createdAt: DateTime!
  id: Int!
  items: [Item!]!

  """최대 50자"""
  title: String!
  updatedAt: DateTime!
}

type JwtPayload {
  """Seller 로그인인 경우에만 발급된다."""
  brandId: Float

  """Seller 로그인인 경우에만 발급된다."""
  brandNameKor: String

  """만료 시점 timestamp"""
  exp: Timestamp!

  """발급 시점 timestamp"""
  iat: Timestamp!
  nickname: String!

  """Seller 로그인인 경우에만 발급된다."""
  sellerId: Float
  sub: Int!
}

type JwtToken {
  access: String!
  refresh: String!
}

type Keyword {
  classes: [KeywordClass!]!
  content: String!
  createdAt: DateTime!
  digests: [Digest!]!
  hitCount: Int!
  id: Int!
  imageUrl: String!

  """좋아요 중 여부"""
  isLiking: Boolean

  """보유중 여부"""
  isOwning: Boolean
  isVisible: Boolean!
  likeCount: Int!
  looks: [Look!]!
  matchTagNames: [String!]!
  name: String!
  relatedKeywords: [Keyword!]!
  score: Float!
  styleTags: [StyleTag!]!

  """스타일팁 줄글"""
  stylingTip: String!
  updatedAt: DateTime!
  usablityRate: Float
}

type KeywordClass {
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  name: String!

  """0~255 정수"""
  order: Int
  type: KeywordClassType!
  updatedAt: DateTime!
}

input KeywordClassFilter {
  isVisible: Boolean
  type: KeywordClassType
}

enum KeywordClassType {
  Essential
  Trending
}

input KeywordFilter {
  idIn: [Int!]

  """[CUSTOM]"""
  isLiking: Boolean

  """[CUSTOM]"""
  isOwning: Boolean
  isVisible: Boolean

  """[CUSTOM]"""
  keywordClassIdIn: [Int!]

  """기본값 id"""
  orderBy: String
}

"""좋아요 대상 객체 분류입니다. (Digest, Look, Video, Comment, Keyword)"""
enum LikeOwnerType {
  Comment
  Digest
  Keyword
  Look
  Video
}

input LoginByCodeInput {
  code: String

  """로그인에 필요한 최소 권한입니다. (ex: Seller로 설정 시 Seller, Admin일때만 성공)"""
  minRole: UserRole = User
  password: String!
}

input LoginByOauthInput {
  """로그인에 필요한 최소 권한입니다. (ex: Seller로 설정 시 Seller, Admin일때만 성공)"""
  minRole: UserRole = User
  oauthCode: String
  oauthProvider: UserProviderType
}

type Look {
  commentCount: Int!
  createdAt: DateTime!
  digests: [Digest!]!
  hitCount: Int!
  id: Int!
  images: [LookImage!]!

  """[MODEL ONLY]"""
  isLiking: Boolean

  """[MODEL ONLY]"""
  isMine: Boolean
  likeCount: Int!
  score: Float!
  styleTags: [StyleTag!]!

  """최대 길이 127"""
  title: String!
  updatedAt: DateTime!
  user: User
  userId: Int
}

input LookFilter {
  brandId: Int
  idIn: [Int!]

  """사용시 다른 필터는 무시합니다. (정렬: "score")"""
  itemId: Int
  orderBy: String = "id"
  styleTagIdIn: [Int!]
  user: LookUserFilter
  userId: Int
  userIdIn: [Int!]
}

type LookImage {
  angle: Int!
  createdAt: DateTime!
  key: String!
  look: Look!
  lookId: Int!
  order: Int!
  url: String!
}

input LookUserFilter {
  heightBetween: [Int!]
}

input ManualCreateItemInput {
  brandNameKor: String!
  imageUrl: String!
  majorCategoryId: Int!
  minorCategoryId: Int!
  name: String!
  originalPrice: Int!
  sellPrice: Int!
  url: String!
}

type Mutation {
  activateItemPrice(itemId: Int!, priceId: Int!): Item!
  addItemDetailImages(createItemDetailImageInput: CreateItemDetailImageInput!, itemId: Int!): Item!
  addItemPrice(addItemPriceInput: AddItemPriceInput!, itemId: Int!): Item!
  addItemSizeCharts(addItemSizeChartInputs: [AddItemSizeChartInput!]!, itemId: Int!): Item!
  addItemUrl(addItemUrlInput: AddItemUrlInput!, itemId: Int!): ItemUrl!
  addMeRefundAccount(createRefundAccountInput: CreateRefundAccountInput!): RefundAccount!
  addMeShippingAddress(createShippingAddressInput: CreateShippingAddressInput!): ShippingAddress!
  answerMeSellerInquiry(answerInquiryInput: AnswerInquiryInput!, id: Int!): Inquiry!
  answerRootInquiry(answerInquiryInput: AnswerInquiryInput!, id: Int!): Inquiry!
  basifyPrice(itemId: Int!, priceId: Int!): Item!
  bulkPickMeSellerExchangeRequests(merchantUids: [String!]!): Boolean!
  bulkPickMeSellerRefundRequests(merchantUids: [String!]!): Boolean!
  bulkShipMeSellerOrderItems(bulkShipOrderItemInput: BulkShipOrderItemInput!): Boolean!
  bulkShipReadyMeSellerOrderItems(merchantUids: [String!]!): Boolean!
  bulkUpdateItems(bulkUpdateItemInput: BulkUpdateItemInput!, ids: [Int!]!): Boolean!

  """취소 사유는 "담당자 취소 처리"로 고정"""
  cancelMeSellerOrderItem(merchantUid: String!, restock: Boolean!): OrderItem!
  cancelOrder(cancelOrderInput: CancelOrderInput!, merchantUid: String!): Order!
  completeExchangeRequest(merchantUid: String!): ExchangeRequest!
  completeOrder(
    """가상계좌 주문건인 경우에만 필요합니다."""
    createOrderVbankReceiptInput: CreateOrderVbankReceiptInput
    merchantUid: String!
  ): BaseOrderOutput!
  confirmMeOrderItem(merchantUid: String!): OrderItem!
  confirmMeSellerRefundRequest(
    merchantUid: String!

    """부과된 배송비"""
    shippingFee: Int!
  ): Boolean!
  crawlItemOptionSet(itemId: Int!): Item!
  createComment(input: CreateCommentInput!): Comment!
  createCoupon(createCouponInput: CreateCouponInput!): Coupon!
  createCouponSpecification(createCouponSpecificationInput: CreateCouponSpecificationInput!): CouponSpecification!
  createCourier(createCourierInput: CreateCourierInput!): Courier!
  createDigest(createDigestInput: CreateDigestInput!): Digest!
  createInquiry(createInquiryInput: CreateInquiryInput!): Inquiry!
  createItemByUrl(url: String!): Item!
  createItemOptionSet(createItemOptionSetInput: CreateItemOptionSetInput!, id: Int!): Item!
  createLook(createLookInput: CreateLookInput!): Look!
  createMyCartItem(createCartItemInput: CreateCartItemInput!): CartItem!
  createSeller(createSellerInput: CreateSellerInput!): Seller!
  createShippingReservePolicy(createProductShippingReservePolicyInput: CreateProductShippingReservePolicyInput!, productId: Int!): Product!
  createUser(createUserInput: CreateUserInput!): User!
  createVideo(createVideoInput: CreateVideoInput!): Video!
  dodgeVbankOrder(merchantUid: String!): BaseOrderOutput!
  failOrder(merchantUid: String!): BaseOrderOutput!
  follow(targetId: Int!): Boolean!
  hit(ownerId: Float!, ownerType: HitOwnerType!): Boolean!
  like(ownerId: Int!, ownerType: LikeOwnerType!): Boolean!
  manualCreateItem(input: ManualCreateItemInput!): Item!
  modifyItemSizeCharts(itemId: Int!, removedChartIds: [Int!], updateItemSizeChartInput: [UpdateItemSizeChartInput!]): Item!
  own(keywordId: Int!): Boolean!
  registerExchangeRequest(merchantUid: String!, registerExchangeRequestInput: RegisterExchangeRequestInput!): ExchangeRequest!
  registerOrder(registerOrderInput: RegisterOrderInput!): BaseOrderOutput!
  removeComment(id: Int!): Comment!
  removeDigest(id: Int!): Boolean!
  removeInquiry(id: Int!): Boolean!
  removeItemDetailImage(detailImageKey: String!, itemId: Int!): Item!
  removeItemPrice(itemId: Int!, priceId: Int!): Item!
  removeItemSizeChartsAll(itemId: Int!): Item!
  removeLook(id: Int!): Boolean!
  removeMeRefundAccount: Boolean!
  removeMeShippingAddress(addressId: Int!): Boolean!
  removeMyCartItems(ids: [Int!]!): Boolean!
  removeVideo(id: Int!): Boolean!

  """정보에 오류가 있는 아이템을 신고합니다."""
  reportItem(id: Int!, reason: String!): Boolean!
  requestAppInstallPoint: Boolean!
  requestOrderRefund(merchantUid: String!, requestOrderRefundInput: RequestOrderRefundInput!): Order!
  reshipMeSellerExchangeRequest(merchantUid: String!, reshipExchangeRequestInput: ReshipExchangeRequestInput!): ExchangeRequest!
  scrapRootSeller(id: Int!): Boolean!
  setCategoryToItem(id: Int!, setCategoryToItemInput: SetCategoryToItemInput!): Item!
  shipMeSellerOrderItem(merchantUid: String!, shipOrderItemInput: ShipOrderItemInput!): OrderItem!
  startOrder(merchantUid: String!, startOrderInput: StartOrderInput!): Order!

  """여러번 구독된 상태였다면 모두 삭제됩니다."""
  unfollow(targetId: Int!): Boolean!

  """여러번 좋아요한 상태였다면 모두 삭제됩니다."""
  unlike(ownerId: Int!, ownerType: LikeOwnerType!): Boolean!
  unown(keywordId: Int!): Boolean!
  updateBrand(id: Int!, updateBrandInput: UpdateBrandInput!): Brand!
  updateComment(id: Int!, input: UpdateCommentInput!): Comment!
  updateCourier(id: Int!, updateCourierInput: UpdateCourierInput!): Courier!
  updateDigest(id: Int!, updateDigestInput: UpdateDigestInput!): Digest!
  updateDigestsExhibitionDigests(digestIds: [Int!]!, id: Int!): DigestsExhibition!
  updateItem(itemId: Int!, updateItemInput: UpdateItemInput!): Item!
  updateItemOption(id: Int!, updateItemOptionInput: UpdateItemOptionInput!): ItemOption!
  updateItemPrice(id: Int!, updateItemPriceInput: UpdateItemPriceInput!): Item!
  updateItemsExhibitionItems(id: Int!, itemIds: [Int!]!): ItemsExhibition!
  updateItemsPackageItems(code: String!, itemIds: [Int!]!): ItemsPackage!
  updateLook(id: Int!, updateLookInput: UpdateLookInput!): Look!
  updateMe(updateUserInput: UpdateUserInput!): User!
  updateMeRefundAccount(updateRefundAccountInput: UpdateRefundAccountInput!): RefundAccount!
  updateMeSeller(updateSellerInput: UpdateSellerInput!): Seller!
  updateMeSellerInquiryAnswer(id: Int!, updateInquiryAnswerInput: UpdateInquiryAnswerInput!): InquiryAnswer!

  """주문상품 단건 운송장 수정"""
  updateMeSellerOrderItemTrackCode(merchantUid: String!, trackCode: String!): OrderItem!
  updateMeShippingAddress(addressId: Int!, updateShippingAddressInput: UpdateShippingAddressInput!): ShippingAddress!
  updateMyCartItem(id: Int!, updateCartItemInput: UpdateCartItemInput!): CartItem!

  """(!) 예전 비밀번호와 현재 비밀번호를 입력해주세요."""
  updateMyPassword(newPassword: String!, oldPassword: String!): User!
  updateMySellerClaimPolicy(updateSellerClaimPolicyInput: UpdateSellerClaimPolicyInput!): SellerClaimPolicy!
  updateMySellerCrawlPolicy(updateSellerCrawlPolicyInput: UpdateSellerCrawlPolicyInput!): SellerCrawlPolicy!
  updateMySellerReturnAddress(updateSellerReturnAddressInput: UpdateSellerReturnAddressInput!): SellerReturnAddress!

  """추가도 이거로 해주시면 됩니다!"""
  updateMySellerSettlePolicy(updateSellerSettlePolicyInput: UpdateSellerSettlePolicyInput!): SellerSettlePolicy!
  updateMySellerShippingPolicy(updateSellerShippingPolicyInput: UpdateSellerShippingPolicyInput!): SellerShippingPolicy!
  updateProduct(id: Int!, updateProductInput: UpdateProductInput!): Product!
  updateRootInquiryAnswer(id: Int!, updateInquiryAnswerInput: UpdateInquiryAnswerInput!): InquiryAnswer!
  updateRootItemByCrawl(itemId: Int!): Item!
  updateRootItemDetailImages(itemId: Int!): Item!
  updateRootItemImageUrl(itemId: Int!): Item!
  updateSellerItemByCrawl(itemId: Int!): Item!
  updateSellerItemDetailImages(itemId: Int!): Item!
  updateSellerItemImageUrl(itemId: Int!): Item!

  """Admin 이상의 권한이 필요합니다."""
  updateSellerSaleStrategy(sellerId: Int!, updateSaleStrategyInput: FindSaleStrategyInput!): Seller!
  updateShippingReservePolicy(productId: Int!, updateProductShippingReservePolicyInput: UpdateProductShippingReservePolicyInput!): Product!
  updateVideo(id: Int!, updateVideoInput: UpdateVideoInput!): Video!
}

type Order {
  """[MODEL ONLY]"""
  brands: [OrderBrand!]!
  buyer: OrderBuyer
  createdAt: DateTime!
  failedAt: DateTime

  """[MODEL ONLY]"""
  id: String!

  """(PK) 주문고유번호. YYMMDDHHmmssSSS + NN(00~99)"""
  merchantUid: String!
  orderItems: [OrderItem!]!
  paidAt: DateTime
  payMethod: PayMethod
  payingAt: DateTime
  receiver: OrderReceiver
  refundAccount: OrderRefundAccount
  refundRequests: [RefundRequest!]!
  status: OrderStatus!
  totalCouponDiscountAmount: Int!
  totalItemFinalPrice: Int!
  totalPayAmount: Int!
  totalShippingFee: Int!
  totalUsedPointAmount: Int!
  updatedAt: DateTime!
  user: User
  userId: Int
  vbankDodgedAt: DateTime
  vbankReadyAt: DateTime
  vbankReceipt: OrderVbankReceipt
}

type OrderBrand {
  id: Int!
  imageUrl: String
  items: [OrderItem!]!
  nameKor: String!
  shippingFee: Int!
  totalItemFinalPrice: Int!
}

type OrderBuyer {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  phoneNumber: String!
  updatedAt: DateTime!
}

input OrderBuyerInput {
  email: String!
  name: String!
  phoneNumber: String!
}

"""교환/반품 책임자?입니다. (구매자 or 판매자)"""
enum OrderClaimFaultOf {
  Customer
  Seller
}

type OrderItem {
  brandNameKor: String!
  campaign: Campaign
  campaignId: Int
  cancelRequestedAt: DateTime
  cancelledAt: DateTime
  claimStatus: OrderItemClaimStatus
  confirmedAt: DateTime
  couponDiscountAmount: Int!
  createdAt: DateTime!

  """지연발송 전환 시점"""
  delayedAt: DateTime

  """지연발송 예정일"""
  delayedShipExpectedAt: DateTime
  exchangeRequest: ExchangeRequest!
  exchangeRequestedAt: DateTime
  exchangedAt: DateTime
  failedAt: DateTime

  """[MODEL ONLY]"""
  id: String!
  isConfirmed: Boolean!
  isDelaying: Boolean!
  isFreeShippingPackage: Boolean!
  isProcessDelaying: Boolean!
  isSettled: Boolean!
  isShipReserved: Boolean!
  item: Item
  itemFinalPrice: Int!
  itemId: Int
  itemName: String!
  itemSellPrice: Int!

  """order.merchantUid + 숫자 2자리"""
  merchantUid: String!

  """[MODEL ONLY]"""
  name: String!
  order: Order!
  orderMerchantUid: String!
  paidAt: DateTime

  """[MODEL ONLY]"""
  payAmount: Int!

  """처리지연 전환 시점"""
  processDelayedAt: DateTime
  product: Product
  productId: Int
  productVariantName: String!
  quantity: Int!
  recommendDigest: Digest
  recommendDigestId: Int
  recommenderId: Int
  recommenderNickname: String
  refundRequest: RefundRequest!
  refundRequestedAt: DateTime
  refundedAt: DateTime
  seller: Seller
  sellerId: Int
  settledAt: DateTime
  shipReadyAt: DateTime

  """예약발송 예정일"""
  shipReservedAt: DateTime
  shipment: Shipment
  shipmentId: Int
  shippedAt: DateTime
  shippingAt: DateTime
  shippingFee: Int!
  status: OrderItemStatus!

  """프론트엔드를 위한 status/claimStatus 표시값입니다."""
  statusDisplayName: String!
  updatedAt: DateTime!
  usedCoupon: Coupon
  usedCouponId: Int
  usedCouponName: String
  usedPointAmount: Int!
  user: User
  userId: Int
  vbankDodgedAt: DateTime
  vbankReadyAt: DateTime
}

"""주문상품 클레임상태입니다."""
enum OrderItemClaimStatus {
  CancelRequested
  Cancelled
  ExchangeRequested
  Exchanged
  RefundRequested
  Refunded
}

input OrderItemFilter {
  claimStatus: OrderItemClaimStatus
  claimStatusIn: [OrderItemClaimStatus!]
  isConfirmed: Boolean
  isProcessDelaying: Boolean
  merchantUidIn: [String!]
  paidAtBetween: [DateTime!]

  """주문번호, 주문상품번호, 아이템 명으로 검색합니다. 구매자 번호를 검색할 땐 dash를 제거하고 보내주세요!"""
  search: String
  sellerId: Int
  shipReadyAtBetween: [DateTime!]
  shippedAtBetween: [DateTime!]
  shippingAtBetween: [DateTime!]
  status: OrderItemStatus
  statusIn: [OrderItemStatus!]
}

input OrderItemSearchFilter {
  claimStatus: OrderItemClaimStatus
  claimStatusIn: [OrderItemClaimStatus!]
  claimStatusIsNull: Boolean
  confirmedAtBetween: [DateTime!]
  isConfirmed: Boolean
  isSettled: Boolean
  paidAtBetween: [DateTime!]
  sellerId: Int
  settledAtBetween: [DateTime!]
  shipReadyAtBetween: [DateTime!]
  shippedAtBetween: [DateTime!]
  shippingAtBetween: [DateTime!]
  status: OrderItemStatus
  statusIn: [OrderItemStatus!]
}

"""주문상품 상태입니다. 클레임상태와 무관하게 handling됩니다."""
enum OrderItemStatus {
  Failed
  Paid
  Pending
  ShipPending
  ShipReady
  Shipped
  Shipping
  VbankDodged
  VbankReady
}

"""생성일 기준 3달 이내의 건들만 count합니다."""
type OrderItemsCountOutput {
  """취소 요청됨 (deprecated)"""
  CancelRequested: Int! @deprecated(reason: "현재 취소는 신청 즉시 완료됩니다.")

  """취소 완료"""
  Cancelled: Int!

  """교환 요청됨"""
  ExchangeRequested: Int!

  """교환 완료"""
  Exchanged: Int!

  """결제 실패"""
  Failed: Int!

  """결제 완료"""
  Paid: Int!

  """결제대기 (입금대기와 다릅니다.)"""
  Pending: Int!

  """반품 요청됨"""
  RefundRequested: Int!

  """반품 완료"""
  Refunded: Int!

  """배송 보류중(예약중)"""
  ShipPending: Int!

  """배송 준비중"""
  ShipReady: Int!

  """배송 완료"""
  Shipped: Int!

  """배송 중"""
  Shipping: Int!

  """입금 전 취소"""
  VbankDodged: Int!

  """입금 대기"""
  VbankReady: Int!

  """구매 확정"""
  confirmed: Int!

  """sellerId와 동일한 값. Apollo Client 캐싱을 위해 존재합니다."""
  id: Int!
  lastUpdatedAt: DateTime!

  """결제 완료"""
  process_delayed_Paid: Int!

  """배송 보류중(예약중)"""
  process_delayed_ShipPending: Int!

  """배송 준비중"""
  process_delayed_ShipReady: Int!
}

type OrderReceiver {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  id: Int!

  """베송 요청사항 (최대 50자)"""
  message: String
  name: String!
  phoneNumber: String!
  postalCode: String!
  receiverName: String!
  updatedAt: DateTime!
}

input OrderReceiverInput {
  """베송 요청사항 (최대 50자)"""
  message: String
  shippingAddressId: Int!
}

"""가상계좌 결제시 환불 받을 계좌 정보"""
type OrderRefundAccount {
  bankCode: BankCode!
  createdAt: DateTime!
  id: Int!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
  updatedAt: DateTime!
}

input OrderRefundAccountInput {
  bankCode: BankCode!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
}

type OrderSheet {
  availablePointAmount: Int!
  brands: [OrderBrand!]!
  coupons: [Coupon!]!

  """[MODEL ONLY] order의 merchantUid와 같습니다."""
  id: String!
  me: User!
  order: Order!
  refundAccount: RefundAccount
  shippingAddresses: [ShippingAddress!]!
}

"""주문 상태입니다. 클라이언트에선 거의 사용되지 않을 값입니다."""
enum OrderStatus {
  Failed
  Paid
  Paying
  Pending
  VbankDodged
  VbankReady
}

type OrderVbankReceipt {
  bankCode: BankCode!
  createdAt: DateTime!
  due: DateTime!
  id: Int!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
  updatedAt: DateTime!
}

"""키워드 보유중 여부와 관련된 개수들입니다."""
type OwnsCountOutput {
  """keywordClassId와 동일"""
  id: Int!

  """해당 클래스의 키워드 중 내가 보유한 수"""
  owning: Int!

  """해당 클래스의 키워드 수"""
  total: Int!
}

input PageInput {
  limit: Int = 20
  offset: Int
  startId: Int
}

enum PayEnviroment {
  Mobile
  Pc
}

"""결제수단입니다."""
enum PayMethod {
  Booknlife
  Card
  Chaipay
  Cultureland
  Happymoney
  Kakaopay
  Kpay
  Lpay
  Naverpay
  Payco
  Phone
  Point
  Samsungpay
  Smartculture
  Ssgpay
  Tosspay
  Trans
  Vbank
}

type Payment {
  amount: Int!
  applyNum: String
  buyerAddr: String!
  buyerEmail: String!
  buyerName: String!
  buyerPostalcode: String!
  buyerTel: String!
  cancellations: [PaymentCancellation!]!
  cancelledAt: DateTime
  cardCode: CardCode
  cardNum: String
  createdAt: DateTime!
  env: PayEnviroment!
  failedAt: DateTime
  failedReason: String

  """(PK) 결제유번호. YYMMDDHHmmssSSS + NN(00~99) 형식"""
  merchantUid: String!
  name: String!
  origin: String!
  paidAt: DateTime
  payMethod: PayMethod!
  pg: Pg!
  pgTid: String
  remainAmount: Int!
  status: PaymentStatus!
  updatedAt: DateTime!
  vbankCode: BankCode
  vbankDate: DateTime
  vbankDodgedAt: DateTime
  vbankHolder: String
  vbankNum: String
  vbankReadyAt: DateTime
}

type PaymentCancellation {
  amount: Int!
  createdAt: DateTime!
  id: Int!
  payment: Payment!
  reason: String!
  refundVbankCode: BankCode!
  refundVbankHolder: String!
  refundVbankNum: String!
  taxFree: Int!
  type: PaymentCancellationType!
  updatedAt: DateTime!
}

enum PaymentCancellationType {
  Cancel
  PartialCancel
}

input PaymentFilter {
  buyerEmailSearch: String
  buyerNameSearch: String
  buyerTelSearch: String
  createdAtBetween: [DateTime!]
  merchantUid: String
  merchantUidSearch: String
  paidAtBetween: [DateTime!]
  payMethodIn: [PayMethod!]
  pgIn: [Pg!]
  pgTid: String
  pgTidSearch: String
  statusIn: [PaymentStatus!]
}

type PaymentListOutput {
  amounts: PaymentsListAmount!
  payMethodCount: PaymentsListPayMethodCount!
  payments: [Payment!]!
  pgCount: PaymentsListPgCount!
  statusCount: PaymentsListStatusCount!
}

enum PaymentStatus {
  Cancelled
  Failed
  Paid
  PartialCancelled
  Pending
  VbankDodged
  VbankReady
}

type PaymentsListAmount {
  totalCancelledAmount: Float!
  totalPaidAmount: Float!
}

type PaymentsListPayMethodCount {
  card: Float!
  kakaopay: Float!
  trans: Float!
  vbank: Float!
}

type PaymentsListPgCount {
  inicis: Float!
}

type PaymentsListStatusCount {
  Cancelled: Float!
  Failed: Float!
  Paid: Float!
  PartialCancelled: Float!
  Pending: Float!
  VbankReady: Float!
}

"""PG사입니다."""
enum Pg {
  Inicis
}

type PointEvent {
  """적립/사용 금액. 양수/음수 구분함"""
  amount: Int!
  createdAt: DateTime!
  id: Int!
  orderItemMerchantUid: String

  """적립/사용 이후 잔고"""
  resultBalance: Int!
  sign: PointSign!
  title: String!
  updatedAt: DateTime!
  userId: Int!
}

input PointEventFilter {
  createdAtLte: DateTime
  createdAtMte: DateTime
  sign: PointSign
  userId: Int
}

"""포인트 분류입니다. 적립(Plus), 사용(Minus)"""
enum PointSign {
  Minus
  Plus
}

type Product {
  createdAt: DateTime!
  id: Int!
  isDeleted: Boolean!

  """[MODEL ONLY] 예약배송 적용 여부"""
  isShipReserving: Boolean!
  item: Item!
  itemId: Int!
  itemOptionValues: [ItemOptionValue!]!
  priceVariant: Int!

  """[MODEL ONLY] item.finalPrice + priceVariant"""
  purchasePrice: Float!
  shippingReservePolicy: ProductShippingReservePolicy
  stock: Int!

  """[MODEL ONLY] stock || shippingReservePolicy?.stock || 0"""
  stockThreshold: Float!
  updatedAt: DateTime!
}

type ProductShippingReservePolicy {
  createdAt: DateTime!

  """예약발송 예정일"""
  estimatedShippingBegginDate: DateTime!
  id: Int!

  """예약설정된 재고. 예약발송일이 되면, 예약발송 상태는 자동으로 종료되며, 잔여 예약발송 재고는 일반 재고에 합산됩니다."""
  stock: Int!
  updatedAt: DateTime!
}

type Query {
  brand(id: Int!): Brand!
  brands: [Brand!]!
  checkFollowing(targetId: Int!): Boolean!
  checkLiking(ownerId: Int!, ownerType: LikeOwnerType!): Boolean!

  """중복이면 true, 아니면 false를 반환한다."""
  checkNicknameDuplicate(nickname: String!): Boolean!
  checkOwning(keywordId: Int!): Boolean!
  checkPin(checkPinInput: CheckPinInput!): Boolean!
  checkoutOrder(merchantUid: String!): OrderSheet!
  comments(
    """기본적으로 parentIdIsNull:true가 적용되어있습니다."""
    filter: CommentFilter
    pageInput: PageInput
  ): [Comment!]!
  commentsCount(ownerId: Int!, ownerType: String!): Int!
  courier(id: Int!): Courier!
  couriers: [Courier!]!
  digest(id: Int!): Digest!
  digests(filter: DigestFilter, pageInput: PageInput): [Digest!]!
  digestsExhibitions: [DigestsExhibition!]!
  expectedCancelAmount(merchantUid: String!, orderItemMerchantUids: [String!]!): Int!
  expectedClaimShippingFee(faultOf: OrderClaimFaultOf!, merchantUid: String!, orderItemMerchantUids: [String!]!): Int!
  genRandomNickname: String!
  getAppleAuthCode(getAppleAuthCodeInput: GetAppleAuthCodeInput!): String!
  groupItemIds(itemId: Int!): [Int!]
  inquiries(filter: InquiryFilter, pageInput: PageInput): [Inquiry!]!
  inquiriesCount(itemId: Int!): Int!
  item(id: Int!): Item!
  itemCategoryTree: [ItemCategory!]!
  itemMajorCategories: [ItemCategory!]!
  itemMinorCategories: [ItemCategory!]!
  itemProperties(itemPropertyFilter: ItemPropertyFilter, pageInput: PageInput): [ItemProperty!]!
  items(itemFilter: ItemFilter, pageInput: PageInput): [Item!]!
  itemsExhibitions: [ItemsExhibition!]!
  itemsGroupDigests(itemId: Int!, pageInput: PageInput): [Digest!]!
  itemsPackage(code: String!): ItemsPackage!
  keyword(id: Int!): Keyword!
  keywordClasses(filter: KeywordClassFilter!, pageInput: PageInput): [KeywordClass!]!
  keywords(filter: KeywordFilter, pageInput: PageInput): [Keyword!]!
  keywordsCountByClass(keywordClassId: Int!): Int!
  likingDigests(pageInput: PageInput!): [Digest!]!
  likingKeywords(pageInput: PageInput!): [Keyword!]!
  likingLooks(pageInput: PageInput!): [Look!]!
  likingVideos(pageInput: PageInput!): [Video!]!
  loginByCode(loginByCodeInput: LoginByCodeInput!): JwtToken!
  loginByOauth(loginByOauthInput: LoginByOauthInput!): JwtToken!
  loginRootSeller(loginByCodeInput: LoginByCodeInput!, sellerId: Int!): JwtToken!
  loginSellerByCode(loginByCodeInput: LoginByCodeInput!): JwtToken!
  look(id: Int!): Look!
  looks(filter: LookFilter, pageInput: PageInput): [Look!]!
  me: User!
  meFollowingUsers: [User!]!
  meInquiries(pageInput: PageInput): [Inquiry!]!
  meInquiry(id: Int!): Inquiry!
  meOrder(merchantUid: String!): Order!
  meOrderItem(merchantUid: String!): OrderItem!

  """VbankReady, Paid만 표시"""
  meOrders(pageInput: PageInput): [Order!]!
  meOwnsCount(keywordClassId: Int!): OwnsCountOutput!
  meSeller: Seller!
  meSellerExchangeRequests(exchangeRequestFilter: ExchangeRequestFilter, pageInput: PageInput): [ExchangeRequest!]!
  meSellerExchangeRequestsCount(forceUpdate: Boolean): ExchangeRequestsCountOutput!
  meSellerInquiries(filter: InquiryFilter, pageInput: PageInput): [Inquiry!]!
  meSellerInquiriesCount(forceUpdate: Boolean): InquiriesCountOutput!
  meSellerInquiry(id: Int!): Inquiry!
  meSellerItems(itemFilter: ItemFilter, pageInput: PageInput): [Item!]!
  meSellerOrderItems(orderItemFilter: OrderItemFilter, pageInput: PageInput): [OrderItem!]!
  meSellerOrderItemsCount(forceUpdate: Boolean): OrderItemsCountOutput!
  meSellerRefundRequests(pageInput: PageInput, refundRequestFilter: RefundRequestFilter): [RefundRequest!]!
  meSellerRefundRequestsCount(forceUpdate: Boolean): RefundRequestsCountOutput!
  meShippingAddresses: [ShippingAddress!]!
  myCart: Cart!
  myCartItemsCount: Int!
  myCoupons: [Coupon!]!
  myExpectedPointEvents(pageInput: PageInput, pointEventFilter: PointEventFilter): [PointEvent!]!

  """Bearer token을 받아 JwtPayload를 반환합니다."""
  myJwtPayload: JwtPayload!
  myPointEvents(pageInput: PageInput, pointEventFilter: PointEventFilter): [PointEvent!]!

  """[Admin] 결제 목록을 조회합니다."""
  payments(paymentFilter: PaymentFilter!): PaymentListOutput!
  product(id: Int!): Product!

  """refresh token을 받아서 새로운 JwtToken을 생성합니다."""
  refreshJwtToken: JwtToken!
  requestPin(requestPinInput: RequestPinInput!): Boolean!
  rootInquiries(filter: InquiryFilter, pageInput: PageInput): [Inquiry!]!

  """[ROOT ADMIN]"""
  rootInquiriesCount(forceUpdate: Boolean): InquiriesCountOutput!
  rootInquiry(id: Int!): Inquiry!
  rootOrderItems(orderItemFilter: OrderItemFilter, pageInput: PageInput): [OrderItem!]!
  searchAllItem(pageInput: PageInput, query: String!): [Item!]!
  searchDigest(pageInput: PageInput, query: String!): [Digest!]!
  searchKeyword(pageInput: PageInput, query: String!): [Keyword!]!
  searchLook(pageInput: PageInput, query: String!): [Look!]!
  searchMeSellerOrderItems(pageInput: PageInput, query: String, searchFilter: OrderItemSearchFilter): SearchOrderItemsOutput!
  searchPurchasableItem(pageInput: PageInput, query: String!): [Item!]!
  searchRootOrderItems(pageInput: PageInput, query: String, searchFilter: OrderItemSearchFilter): SearchOrderItemsOutput!
  searchVideo(pageInput: PageInput, query: String!): [Video!]!
  seller(id: Int!): Seller!
  sellers(pageInput: PageInput, sellerFilter: SellerFilter): [Seller!]!
  styleTags: [StyleTag!]!
  user(id: Int!): User!
  video(id: Int!): Video!
  videos(filter: VideoFilter, pageInput: PageInput): [Video!]!
}

"""별점을 나타냅니다. 클라이언트로부터 입력 받은 0~5 실수를 0~10 정수로 변환합니다."""
scalar Rating

"""가상계좌 결제시 환불 받을 계좌 정보"""
type RefundAccount {
  bankCode: BankCode!
  createdAt: DateTime!
  id: Int!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
  updatedAt: DateTime!
  user: User!
}

type RefundRequest {
  """반품대상 주문상품 총 결제액 (배송비 제외)"""
  amount: Int!
  confirmedAt: DateTime
  faultOf: OrderClaimFaultOf!
  isProcessDelaying: Boolean!
  isSettled: Boolean!

  """(PK) YYMMDDHHmmssSSS + NN(00~99) + M"""
  merchantUid: String!
  order: Order!
  orderItems: [OrderItem!]!
  orderMerchantUid: String!

  """수거 완료 시점"""
  pickedAt: DateTime
  processDelayedAt: DateTime!

  """최대 255자"""
  reason: String!

  """최대 255자"""
  rejectReason: String
  rejectedAt: DateTime
  requestedAt: DateTime!
  seller: Seller
  sellerId: Int
  settledAt: DateTime
  shipment: Shipment
  shipmentId: Int

  """부과된 반품 배송비"""
  shippingFee: Int!
  status: RefundRequestStatus!
  user: User
  userId: Int
}

input RefundRequestFilter {
  confirmedAtBetween: [DateTime!]
  isProcessDelaying: Boolean
  merchantUidIn: [String!]
  order: RefundRequestOrderFilter
  pickedAtBetween: [DateTime!]
  requestedAtBetween: [DateTime!]

  """주문번호, 운송장번호로 검색"""
  search: String
  sellerId: Int
  status: RefundRequestStatus
  statusIn: [RefundRequestStatus!]
}

input RefundRequestOrderFilter {
  paidAtBetween: [DateTime!]
}

"""반품요청 상태입니다."""
enum RefundRequestStatus {
  Confirmed
  Picked
  Rejected
  Requested
}

"""생성일 기준 3달 이내의 건들만 count합니다."""
type RefundRequestsCountOutput {
  """반품 승인"""
  Confirmed: Int!

  """수거 완료"""
  Picked: Int!

  """반품 거부"""
  Rejected: Int!

  """반품 요청 (= 수거중)"""
  Requested: Int!

  """sellerId와 동일한 값. Apollo Client 캐싱을 위해 존재합니다."""
  id: Int!
  lastUpdatedAt: DateTime!

  """반품 처리 지연 (지연중인 requested + picked)"""
  process_delayed: Int!
}

input RegisterExchangeRequestInput {
  faultOf: OrderClaimFaultOf!

  """교환 대상 product"""
  productId: Int!

  """255자 이내로 적어주세요"""
  reason: String!
  shipmentInput: CreateShipmentInput
}

input RegisterOrderInput {
  cartItemIds: [Int!]
  orderItemInputs: [RegisterOrderItemInput!]
}

input RegisterOrderItemInput {
  productId: Int!
  quantity: Int!
  recommendDigestId: Int
}

input RequestOrderRefundInput {
  faultOf: OrderClaimFaultOf!

  """반품처리할 OrderItem들. 같은 브랜드의 OrderItem들로만 신청할 수 있습니다."""
  orderItemMerchantUids: [String!]!

  """최대 255자"""
  reason: String!
  shipmentInput: CreateShipmentInput
}

input RequestPinInput {
  phoneNumber: String
}

input ReshipExchangeRequestInput {
  courierId: Int!
  trackCode: String!
}

type SearchOrderItemsOutput {
  result: [OrderItem!]!
  total: Int!
}

type Seller {
  brand: Brand!
  brandId: Int
  businessCode: String
  businessName: String
  claimPolicy: SellerClaimPolicy!
  courier: Courier
  courierId: Int
  crawlPolicy: SellerCrawlPolicy!
  crawlStrategy: SellerCrawlStrategy!
  createdAt: DateTime!
  csNotiPhoneNumber: String
  email: String
  id: Int!
  kakaoTalkCode: String
  mailOrderBusinessCode: String
  operationTimeMessage: String
  orderNotiPhoneNumber: String
  phoneNumber: String

  """최대 20자"""
  representativeName: String
  returnAddress: SellerReturnAddress!
  saleStrategy: SellerSaleStrategy!
  settlePolicy: SellerSettlePolicy
  shippingPolicy: SellerShippingPolicy!
  updatedAt: DateTime!
  user: User!
  userId: Int
}

type SellerClaimPolicy {
  createdAt: DateTime!
  description: String
  fee: Int!
  id: Int!
  isExchangable: Boolean!
  isRefundable: Boolean!

  """담당자 번호"""
  phoneNumber: String!

  """담당자 이름"""
  picName: String!
  sellerId: Int!
  updatedAt: DateTime!
}

type SellerCrawlPolicy {
  createdAt: DateTime!
  id: Int!

  """크롤링된 새로운 아이템들을 추가 등록하는가"""
  isInspectingNew: Boolean!

  """기존 아이템들의 이름/가격을 업데이트하는가"""
  isUpdatingItems: Boolean!
  sellerId: Int!
  updatedAt: DateTime!
}

type SellerCrawlStrategy {
  baseUrl: String!
  codeRegex: String!
  createdAt: DateTime!
  id: Int!
  itemsSelector: String!
  pageParam: String
  pagination: Boolean!
  sellerId: Int!

  """'<>'으로 join된 상태다."""
  startPathNamesJoin: String!
  updatedAt: DateTime!
}

input SellerFilter {
  businessCode: String
  kakaoTalkCodeIn: [String!]
  search: String
}

type SellerReturnAddress {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  id: Int!
  name: String!
  phoneNumber: String!
  postalCode: String!
  receiverName: String!
  sellerId: Int!
  updatedAt: DateTime!
}

type SellerSaleStrategy {
  canUseCoupon: Boolean!
  canUseMileage: Boolean!
  createdAt: DateTime!
  id: Int!
  pickkDiscountRate: Int!
  sellerId: Int!
  updatedAt: DateTime!
}

"""정산 계좌"""
type SellerSettleAccount {
  bankCode: BankCode!
  createdAt: DateTime!
  id: Int!

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String!
  ownerName: String!
  settlePolicyId: Int!
  updatedAt: DateTime!
}

type SellerSettlePolicy {
  """정산 받을 계좌"""
  account: SellerSettleAccount!
  createdAt: DateTime!

  """세금계산서 수령이메일"""
  email: String!
  id: Int!

  """담당자 번호"""
  phoneNumber: String!
  picName: String!

  """기본 정산율"""
  rate: Int!
  sellerId: Int!
  updatedAt: DateTime!
}

type SellerShippingPolicy {
  createdAt: DateTime!
  description: String
  fee: Int!
  id: Int!
  minimumAmountForFree: Int!
  sellerId: Int!
  updatedAt: DateTime!
}

input SetCategoryToItemInput {
  majorCategoryId: Int!
  minorCategoryId: Int!
}

input ShipOrderItemInput {
  courierId: Int!
  trackCode: String!
}

type Shipment {
  courier: Courier!
  courierId: Int!
  createdAt: DateTime!
  id: Int!
  lastTrackedAt: DateTime
  ownerPk: String
  ownerType: ShipmentOwnerType
  shipmentHistories: [ShipmentHistory!]!
  status: ShipmentStatus!
  trackCode: String!
}

type ShipmentHistory {
  createdAt: DateTime!
  id: Int!
  locationName: String!
  shipmentId: Int!
  statusText: String!
  time: DateTime!
}

"""배송 연관 객체 분류입니다."""
enum ShipmentOwnerType {
  ExchangeRequestPick
  ExchangeRequestReship
  OrderItem
  RefundRequest
}

enum ShipmentStatus {
  Cancelled
  Failed
  Shipped
  Shipping
}

type ShippingAddress {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  id: Int!
  isPrimary: Boolean!
  name: String!
  phoneNumber: String!
  postalCode: String!
  receiverName: String!
  updatedAt: DateTime!
  userId: Int!
}

input StartOrderInput {
  buyerInput: OrderBuyerInput!
  orderItemInputs: [StartOrderItemInput!]
  payMethod: PayMethod
  receiverInput: OrderReceiverInput!
  refundAccountInput: OrderRefundAccountInput
  usedPointAmount: Int!
}

input StartOrderItemInput {
  """order.merchantUid + 숫자 2자리"""
  merchantUid: String!
  usedCouponId: Int
}

type StyleTag {
  createdAt: DateTime!
  id: Int!

  """최대 길이 30"""
  name: String!
  order: Int!
  updatedAt: DateTime!
}

"""
Date type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateBrandInput {
  description: String
  imageUrl: String
  nameEng: String
  nameKor: String
}

input UpdateCartItemInput {
  quantity: Int!
}

input UpdateCommentInput {
  content: String
}

input UpdateCourierInput {
  code: String
  name: String
  phoneNumber: String
  returnReserveUrl: String
}

input UpdateDigestInput {
  """최대 길이 65000자"""
  content: String
  imageUrls: [String!]
  itemId: Int
  itemPropertyValueIds: [Int!]
  rating: Rating
  size: String

  """최대 길이 127"""
  title: String
}

input UpdateInquiryAnswerInput {
  """최대 길이 255"""
  content: String

  """표시될 답변작성자 이름. 최대 길이 30"""
  displayAuthor: String
}

input UpdateItemInput {
  description: String
  imageUrl: String
  isInfiniteStock: Boolean = true
  majorCategoryId: Float
  minorCategoryId: Float
  name: String
}

input UpdateItemOptionInput {
  name: String!
}

input UpdateItemPriceInput {
  displayPrice: Float
  endAt: DateTime
  isCrawlUpdating: Boolean
  originalPrice: Int
  pickkDiscountAmount: Int
  pickkDiscountRate: Int
  sellPrice: Int
  startAt: DateTime
  unit: ItemPriceUnit
}

input UpdateItemSizeChartInput {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  id: Int
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  waistWidth: Float
  watchBandDepth: Float
}

input UpdateLookDigestInput {
  id: Int
  itemId: Int
  size: String
}

input UpdateLookInput {
  digests: [UpdateLookDigestInput!]
  imageUrls: [String!]
  styleTagIds: [Int!]

  """최대 길이 127"""
  title: String
}

input UpdateProductInput {
  stock: Int!
}

input UpdateProductShippingReservePolicyInput {
  """예약발송 예정일"""
  estimatedShippingBegginDate: DateTime

  """예약설정된 재고. 예약발송일이 되면, 예약발송 상태는 자동으로 종료되며, 잔여 예약발송 재고는 일반 재고에 합산됩니다."""
  stock: Int
}

input UpdateRefundAccountInput {
  bankCode: BankCode

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String
  ownerName: String
}

input UpdateSellerClaimPolicyInput {
  description: String
  fee: Int
  isExchangable: Boolean
  isRefundable: Boolean

  """담당자 번호"""
  phoneNumber: String

  """담당자 이름"""
  picName: String
}

input UpdateSellerCrawlPolicyInput {
  """크롤링된 새로운 아이템들을 추가 등록하는가"""
  isInspectingNew: Boolean

  """기존 아이템들의 이름/가격을 업데이트하는가"""
  isUpdatingItems: Boolean
}

input UpdateSellerInput {
  businessCode: String
  businessName: String
  csNotiPhoneNumber: String
  email: String
  kakaoTalkCode: String
  mailOrderBusinessCode: String
  operationTimeMessage: String
  orderNotiPhoneNumber: String
  phoneNumber: String

  """최대 20자"""
  representativeName: String
}

input UpdateSellerReturnAddressInput {
  baseAddress: String
  detailAddress: String
  name: String
  phoneNumber: String
  postalCode: String
  receiverName: String
}

input UpdateSellerSettleAccountInput {
  bankCode: BankCode

  """계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다."""
  number: String
  ownerName: String
}

input UpdateSellerSettlePolicyInput {
  accountInput: UpdateSellerSettleAccountInput

  """세금계산서 수령이메일"""
  email: String

  """담당자 번호"""
  phoneNumber: String
  picName: String

  """기본 정산율"""
  rate: Int
}

input UpdateSellerShippingPolicyInput {
  description: String
  fee: Int
  minimumAmountForFree: Int
}

input UpdateShippingAddressInput {
  baseAddress: String
  detailAddress: String
  isPrimary: Boolean
  name: String
  phoneNumber: String
  postalCode: String
  receiverName: String
  userId: Int
}

input UpdateUserInput {
  avatarUrl: String
  code: String

  """최대 255자"""
  description: String
  email: String
  height: Int
  instagramCode: String
  name: String

  """최대 11자"""
  nickname: String
  styleTagIds: [Int!]
  weight: Int
  youtubeUrl: String
}

input UpdateVideoDigestInput {
  id: Int
  itemId: Int
  itemPropertyValueIds: [Int!]
  rating: Rating
  size: String
  timestampEndSecond: Int
  timestampStartSecond: Int

  """최대 길이 127"""
  title: String
}

input UpdateVideoInput {
  digests: [UpdateVideoDigestInput!]

  """최대 길이 127"""
  title: String

  """최대 길이 40"""
  youtubeCode: String
}

type User {
  """[ResolveField] 활성화된 주문건들 개수"""
  activeOrderItemsCount: Int!

  """[ResolveField] 사용가능 포인트 잔고"""
  availablePoint: Int!
  avatarUrl: String
  code: String
  createdAt: DateTime!

  """최대 255자"""
  description: String
  email: String

  """[ResolveField] 적립예정 포인트 잔고"""
  expectedPoint: Int!
  followCount: Int!
  height: Int
  id: Int!
  instagramCode: String

  """[MODEL ONLY]"""
  isFollowing: Boolean

  """[MODEL ONLY]"""
  isMe: Boolean
  name: String

  """최대 11자"""
  nickname: String!
  oauthCode: String
  oauthProvider: UserProviderType
  phoneNumber: String
  refundAccount: RefundAccount
  role: UserRole
  shippingAddresses: [ShippingAddress!]
  styleTags: [StyleTag!]!
  updatedAt: DateTime!
  weight: Int
  youtubeUrl: String
}

"""Oauth 제공 서비스입니다."""
enum UserProviderType {
  Apple
  Facebook
  Kakao
}

"""유저의 역할/권한을 나타냅니다. User->Editor->Seller->Admin 순으로 계층 구조입니다."""
enum UserRole {
  Admin
  Editor
  Seller
  User
}

type Video {
  commentCount: Int!
  createdAt: DateTime!
  digests: [Digest!]!
  hitCount: Int!
  id: Int!

  """[MODEL ONLY]"""
  isLiking: Boolean

  """[MODEL ONLY]"""
  isMine: Boolean
  likeCount: Int!
  score: Float!

  """최대 길이 127"""
  title: String!
  updatedAt: DateTime!
  user: User
  userId: Int

  """최대 길이 40"""
  youtubeCode: String!
}

input VideoFilter {
  idIn: [Int!]
  orderBy: String = "id"
  userId: Int
  userIdIn: [Int!]
}
