# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddItemNoticeInput {
  endAt: DateTime
  message: String!
  startAt: DateTime
  type: ItemNoticeType
}

input AddItemPriceInput {
  endAt: DateTime
  isActive: Boolean
  isCrawlUpdating: Boolean!
  originalPrice: Int!
  pickkDiscountAmount: Int
  pickkDiscountRate: Int
  sellPrice: Int!
  startAt: DateTime
}

input AddItemSizeChartInput {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  waistWidth: Float
  watchBandDepth: Float
}

input AddItemUrlInput {
  isPrimary: Boolean!
  url: String!
}

"""
애플 로그인시 사용됩니다. [App, Web]
"""
enum AppleClientType {
  App
  Web
}

type Brand {
  createdAt: DateTime!
  description: String
  id: Int!
  imageUrl: String
  nameEng: String
  nameKor: String!
  seller: Seller
  updatedAt: DateTime!
}

input BulkUpdateItemInput {
  isMdRecommended: Boolean
  isSellable: Boolean
  majorCategoryId: Int
  minorCategoryId: Int
}

type Campaign {
  createdAt: DateTime!
  endAt: DateTime!
  id: Int!
  items: [Item!]!

  """
  적용 정산률 (0~100)
  """
  rate: Int!
  startAt: DateTime!
  updatedAt: DateTime!
}

type Cart {
  """
  CartItem들을 브랜드 단위로 묶은 단위입니다.
  """
  cartBrands: [CartBrand!]!
  cartItems: [CartItem!]!

  """
  userId와 동일한 더미값입니다.
  """
  id: Int!
}

type CartBrand {
  brand: Brand!
  cartItems: [CartItem!]!
  sellerShippingPolicy: SellerShippingPolicy!
}

type CartItem {
  createdAt: DateTime!
  id: Int!
  isAdjusted: Boolean!
  product: Product!
  productId: Float!
  quantity: Int!
  updatedAt: DateTime!
}

"""
교환/반품 배송비 지불 방식. (Trans:계좌입금, Enclose:택배상자 동봉)
"""
enum ClaimFeePayMethod {
  Enclose
  Trans
}

type Coupon {
  createdAt: DateTime!
  id: Int!
  spec: CouponSpecification
  specId: Float!
  status: CouponStatus
  updatedAt: DateTime!
}

type CouponSpecification {
  """
  이 값으로 클라이언트에서 필터링 해주세요.
  """
  availableAt: DateTime
  brand: Brand
  brandId: Float
  createdAt: DateTime!
  discountAmount: Int

  """
  1~99 정수만 입력 가능합니다.
  """
  discountRate: Int
  expireAt: DateTime!
  id: Int!
  maximumDiscountPrice: Int
  minimumForUse: Int

  """
  최대 30자까지 입력할 수 있습니다.
  """
  name: String!
  type: CouponType!
  updatedAt: DateTime!
}

"""
쿠폰 상태입니다. 사용가능(Ready), 사용됨(Applied)
"""
enum CouponStatus {
  Applied
  Ready
}

"""
쿠폰 분류입니다. 정률적용(Rate), 정액적용(Amount)
"""
enum CouponType {
  Amount
  Rate
}

type Courier {
  code: String!
  createdAt: DateTime!
  id: Int!
  issue: CourierIssue
  name: String!
  phoneNumber: String!
  returnReserveUrl: String!
  updatedAt: DateTime!
}

type CourierIssue {
  createdAt: DateTime!
  endAt: DateTime!
  id: Int!
  message: String!
  updatedAt: DateTime!
}

input CreateCartItemInput {
  productId: Float!
  quantity: Int!
}

input CreateCouponInput {
  specId: Float!
}

input CreateCouponSpecificationInput {
  """
  이 값으로 클라이언트에서 필터링 해주세요.
  """
  availableAt: DateTime
  brandId: Float
  discountAmount: Int

  """
  1~99 정수만 입력 가능합니다.
  """
  discountRate: Int
  expireAt: DateTime!
  maximumDiscountPrice: Int
  minimumForUse: Int

  """
  최대 30자까지 입력할 수 있습니다.
  """
  name: String!
  type: CouponType!
}

input CreateCourierInput {
  code: String!
  name: String!
  phoneNumber: String!
  returnReserveUrl: String!
}

input CreateItemDetailImageInput {
  urls: [String!]!
}

input CreateItemOptionInput {
  name: String!
  values: [String!]!
}

input CreateItemOptionSetInput {
  options: [CreateItemOptionInput!]!
}

input CreateRefundAccountInput {
  bankCode: InicisBankCode!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
}

input CreateSellerClaimAccountInput {
  bankCode: InicisBankCode!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
}

input CreateSellerClaimPolicyInput {
  accountInput: CreateSellerClaimAccountInput
  fee: Int!
  feePayMethod: ClaimFeePayMethod!

  """
  담당자 번호
  """
  phoneNumber: String!

  """
  담당자 이름
  """
  picName: String!
}

input CreateSellerCrawlPolicyInput {
  isInspectingNew: Boolean!
  isUpdatingItems: Boolean!
}

input CreateSellerCrawlStrategyInput {
  baseUrl: String!
  codeRegex: String!
  itemsSelector: String!
  pageParam: String
  pagination: Boolean!

  """
  '<>'으로 join된 상태다.
  """
  startPathNamesJoin: String!
}

input CreateSellerInput {
  brandId: Int!
  businessCode: String!
  businessName: String!
  claimPolicyInput: CreateSellerClaimPolicyInput!
  courierId: Int!
  crawlPolicyInput: CreateSellerCrawlPolicyInput!
  crawlStrategyInput: CreateSellerCrawlStrategyInput!
  csNotiPhoneNumber: String
  email: String!
  kakaoTalkCode: String
  mailOrderBusinessCode: String!
  operationTimeMessage: String!
  orderNotiPhoneNumber: String
  phoneNumber: String!
  representativeName: String!
  returnAddressInput: CreateSellerReturnAddressInput!
  saleStrategyInput: FindSaleStrategyInput!
  settlePolicyInput: CreateSellerSettlePolicyInput
  shippingPolicyInput: CreateSellerShippingPolicyInput!
  userId: Int!
}

input CreateSellerReturnAddressInput {
  baseAddress: String!
  detailAddress: String!
  postalCode: String!
}

input CreateSellerSettleAccountInput {
  bankCode: InicisBankCode!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
}

input CreateSellerSettlePolicyInput {
  """
  정산 받을 계좌
  """
  accountInput: CreateSellerSettleAccountInput

  """
  세금계산서 수령이메일
  """
  email: String!

  """
  담당자 번호
  """
  phoneNumber: String!
  picName: String!

  """
  정산율
  """
  rate: Int!
}

input CreateSellerShippingPolicyInput {
  fee: Int!
  minimumAmountForFree: Int!
}

input CreateShippingAddressInput {
  baseAddress: String!
  detailAddress: String!
  isPrimary: Boolean!
  name: String!
  phoneNumber1: String!
  phoneNumber2: String
  postalCode: String!
  receiverName: String!
}

input CreateUserInput {
  code: String
  email: String
  height: Int
  name: String
  nickname: String!
  oauthCode: String
  oauthProvider: UserProviderType
  password: String
  weight: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FindSaleStrategyInput {
  canUseCoupon: Boolean!
  canUseMileage: Boolean!
}

"""
은행 코드입니다. KG Inicis와 관련 없는 일반 계좌를 저장할 때도 사용됩니다.
"""
enum InicisBankCode {
  AbnAmro
  BcCard
  Boa
  Busan
  ChBank
  Chohung
  Citi
  Commercial
  Cu
  Daegu
  Deutsche
  EPost
  ExShinhan
  Hana
  Hanil
  Hanmi
  Housing
  Hsbc
  Ibk
  Jeju
  Jeonbuk
  JpMorgan
  KBank
  KakaoBank
  KakaoMoney
  Kangwon
  Kb
  Kdb
  Keb
  Kwangju
  Kyongnam
  LPoint
  MitsubishiTokyo
  MutualSavings
  NaverPoint
  NhBank
  Nonghyup
  Payco
  Peace
  Sc
  Seoul
  ShBank
  Shinan
  Shinhan
  Shinsegae
  Sj
  SsgMoney
  TossMoney
  Woori
}

type Item {
  brand: Brand!
  brandId: Int!
  campaigns: [Campaign!]
  createdAt: DateTime!
  description: String
  detailImages: [ItemDetailImage!]
  finalPrice: Float!
  id: Int!
  imageUrl: String!
  isInfiniteStock: Boolean!
  isMdRecommended: Boolean!
  isPurchasable: Boolean!
  isSellable: Boolean!
  isSoldout: Boolean!
  majorCategory: ItemCategory
  majorCategoryId: Float
  minorCategory: ItemCategory
  minorCategoryId: Float
  name: String!

  """
  상품 안내 메세지입니다. 파트너어드민에서 입력할 수 있습니다.
  """
  notice: ItemNotice
  options: [ItemOption!]
  originalPrice: Float!
  prices: [ItemPrice!]!
  products: [Product!]
  providedCode: String
  salePolicy: ItemSalePolicy
  sellPrice: Float!

  """
  판매가능시점(=활성전환일)
  """
  sellableAt: DateTime
  sizeChartMetaDatas: [ItemSizeChartMetaData!]
  sizeCharts: [ItemSizeChart!]
  updatedAt: DateTime!
  urls: [ItemUrl!]!
}

type ItemCategory {
  children: [ItemCategory!]!
  code: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  parent: ItemCategory!
  updatedAt: DateTime!
}

type ItemDetailImage {
  angle: Int!
  createdAt: DateTime!
  key: String!
  url: String!
}

input ItemFilter {
  brandId: Int
  createdAtLte: DateTime
  createdAtMte: DateTime
  isMdRecommended: Boolean
  isPurchasable: Boolean
  isSellable: Boolean
  majorCategoryId: Float
  minorCategoryId: Float

  """
  아이템 이름(name)으로 검색합니다.
  """
  search: String
  sellableAtLte: DateTime
  sellableAtMte: DateTime
}

type ItemNotice {
  createdAt: DateTime!
  endAt: DateTime
  id: Int!
  message: String!
  startAt: DateTime
  type: ItemNoticeType
  updatedAt: DateTime!
}

"""
아이템 안내 분류입니다. 기본값은 General입니다.
"""
enum ItemNoticeType {
  CustomOrder
  DeliveryDelay
  General
  OverseaDelivery
  PreorderDelivery
}

type ItemOption {
  createdAt: DateTime!
  id: Int!
  name: String!
  order: Float!
  updatedAt: DateTime!
  values: [ItemOptionValue!]!
}

type ItemOptionValue {
  createdAt: DateTime!
  id: Int!
  name: String!
  order: Float!
  updatedAt: DateTime!
}

type ItemPrice {
  createdAt: DateTime!
  displayPrice: Float
  endAt: DateTime
  finalPrice: Int!
  id: Int!
  isActive: Boolean!
  isBase: Boolean!
  isCrawlUpdating: Boolean!
  itemId: Int!
  originalPrice: Int!
  pickkDiscountAmount: Int
  pickkDiscountRate: Int
  sellPrice: Int!
  startAt: DateTime
  unit: ItemPriceUnit
  updatedAt: DateTime!
}

"""
아이템의 가격 단위입니다. null인 경우 원화로 취급되며, 값을 가질 경우 적절한 displayPrice에 적절한 환율을 곱한 값으로 salePrice를 설정합니다.
"""
enum ItemPriceUnit {
  AUD
  CAD
  CNY
  EUR
  GBP
  JPY
  KRW
  USD
}

type ItemSalePolicy {
  createdAt: DateTime!
  id: Int!
  isUsingQuantityLimit: Boolean!
  isUsingStock: Boolean!
  quantityLimit: Int!
  updatedAt: DateTime!
}

type ItemSizeChart {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  createdAt: DateTime!
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  id: Int!
  itemId: Int!
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  updatedAt: DateTime!
  waistWidth: Float
  watchBandDepth: Float
}

type ItemSizeChartMetaData {
  columnName: String!
  displayName: String!
}

type ItemUrl {
  createdAt: DateTime!
  id: Int!
  isAvailable: Boolean!
  isPrimary: Boolean!
  itemId: Int!
  updatedAt: DateTime!
  url: String!
}

type JwtPayload {
  exp: Timestamp!
  iat: Timestamp!
  nickname: String!
  sub: Int!
}

type JwtToken {
  access: String!
  refresh: String!
}

input LoginByCodeInput {
  code: String

  """
  로그인에 필요한 최소 권한입니다. (ex: Seller로 설정 시 Seller, Admin일때만 성공)
  """
  minRole: UserRole = User
  password: String!
}

input LoginByOauthInput {
  """
  로그인에 필요한 최소 권한입니다. (ex: Seller로 설정 시 Seller, Admin일때만 성공)
  """
  minRole: UserRole = User
  oauthCode: String
  oauthProvider: UserProviderType
}

input LoginWithAppleInput {
  clientType: AppleClientType!
  code: String!
}

type Mutation {
  activateItemPrice(itemId: Int!, priceId: Int!): Item!
  addItemDetailImages(
    createItemDetailImageInput: CreateItemDetailImageInput!
    itemId: Int!
  ): Item!
  addItemNotice(
    addItemNoticeInput: AddItemNoticeInput!
    itemId: Int!
  ): ItemNotice!
  addItemPrice(addItemPriceInput: AddItemPriceInput!, itemId: Int!): ItemPrice!
  addItemSizeCharts(
    addItemSizeChartInputs: [AddItemSizeChartInput!]!
    itemId: Int!
  ): Item!
  addItemUrl(addItemUrlInput: AddItemUrlInput!, itemId: Int!): ItemUrl!
  addMyRefundAccount(
    createRefundAccountInput: CreateRefundAccountInput!
  ): RefundAccount!
  addMyShippingAddress(
    createShippingAddressInput: CreateShippingAddressInput!
  ): [ShippingAddress!]!
  basifyPrice(itemId: Int!, priceId: Int!): Item!
  bulkUpdateItems(
    bulkUpdateItemInput: BulkUpdateItemInput!
    ids: [Int!]!
  ): Boolean!
  createCoupon(createCouponInput: CreateCouponInput!): Coupon!
  createCouponSpecification(
    createCouponSpecificationInput: CreateCouponSpecificationInput!
  ): CouponSpecification!
  createCourier(createCourierInput: CreateCourierInput!): Courier!
  createItemOptionSet(
    createItemOptionSetInput: CreateItemOptionSetInput!
    id: Int!
  ): Item!
  createMyCartItem(createCartItemInput: CreateCartItemInput!): CartItem!
  createOrderSheet(orderSheetInput: OrderSheetInput!): OrderSheet!
  createSeller(createSellerInput: CreateSellerInput!): Seller!
  createUser(createUserInput: CreateUserInput!): User!
  modifyItemSizeCharts(
    itemId: Int!
    removedChartIds: [Int!]
    updateItemSizeChartInput: [UpdateItemSizeChartInput!]
  ): Item!

  """
  입력된 정보를 기반으로 OrderSheet을 찾아낸 뒤, 재고 검사 및 차감을 수행합니다.
  """
  prepareOrder(orderSheetUuid: String!, userId: Int!): Boolean!
  removeCourierIssue(courierId: Int!): Courier!
  removeItemDetailImage(detailImageKey: String!, itemId: Int!): Item!
  removeItemNotice(itemId: Int!): Item!
  removeItemPrice(itemId: Int!, priceId: Int!): Item!
  removeItemSizeChartsAll(itemId: Int!): Item!
  removeMyAvatarImage: UserAvatarImage!
  removeMyCartItems(ids: [Int!]!): Boolean!
  removeMyRefundAccount: User!
  removeMyShippingAddress(addressId: Int!): [ShippingAddress!]!
  updateBrand(id: Int!, updateBrandInput: UpdateBrandInput!): Brand!
  updateCourier(id: Int!, updateCourierInput: UpdateCourierInput!): Courier!
  updateCourierIssue(
    courierId: Int!
    updateCourierIssueInput: UpdateCourierIssueInput!
  ): CourierIssue!
  updateItem(itemId: Int!, updateItemInput: UpdateItemInput!): Item!
  updateItemNotice(
    itemId: Int!
    updateItemNoticeInput: UpdateItemNoticeInput!
  ): ItemNotice!
  updateItemOption(
    id: Int!
    updateItemOptionInput: UpdateItemOptionInput!
  ): ItemOption!
  updateItemPrice(
    id: Int!
    updateItemPriceInput: UpdateItemPriceInput!
  ): ItemPrice!
  updateMe(updateUserInput: UpdateUserInput!): User!
  updateMeSeller(updateSellerInput: UpdateSellerInput!): Seller!
  updateMyAvatarImage(
    uploadSingleImageInput: UploadSingleImageInput!
  ): UserAvatarImage!
  updateMyCartItem(
    id: Int!
    updateCartItemInput: UpdateCartItemInput!
  ): CartItem!

  """
  (!) 예전 비밀번호와 현재 비밀번호를 입력해주세요.
  """
  updateMyPassword(newPassword: String!, oldPassword: String!): User!
  updateMyRefundAccount(
    updateRefundAccountInput: UpdateRefundAccountInput!
  ): RefundAccount!
  updateMySellerClaimPolicy(
    updateSellerClaimPolicyInput: UpdateSellerClaimPolicyInput!
  ): SellerClaimPolicy!
  updateMySellerCrawlPolicy(
    updateSellerCrawlPolicyInput: UpdateSellerCrawlPolicyInput!
  ): SellerCrawlPolicy!
  updateMySellerReturnAddress(
    updateSellerReturnAddressInput: UpdateSellerReturnAddressInput!
  ): SellerReturnAddress!

  """
  추가도 이거로 해주시면 됩니다!
  """
  updateMySellerSettlePolicy(
    updateSellerSettlePolicyInput: UpdateSellerSettlePolicyInput!
  ): SellerSettlePolicy!
  updateMySellerShippingPolicy(
    updateSellerShippingPolicyInput: UpdateSellerShippingPolicyInput!
  ): SellerShippingPolicy!
  updateMyShippingAddress(
    addressId: Int!
    updateShippingAddressInput: UpdateShippingAddressInput!
  ): ShippingAddress!
  updateProduct(id: Int!, updateProductInput: UpdateProductInput!): Product!

  """
  입력한 seller의 saleStrategy를 변경합니다. Admin 이상의 권한이 필요합니다.
  """
  updateSellerSaleStrategy(
    sellerId: Int!
    updateSaleStrategyInput: FindSaleStrategyInput!
  ): SaleStrategy!
  uploadMultipleImages(uploadImageInput: UploadMultipleImageInput!): [String!]!
}

type Order {
  buyer: OrderBuyer!
  createdAt: DateTime!
  id: Int!
  orderItems: [OrderItem!]!
  paidAt: DateTime
  payMethod: OrderStatus!
  receiver: OrderReceiver!
  status: OrderStatus!
  totalCouponDiscountAmount: Int!
  totalItemFinalPrice: Int!
  totalPayAmount: Int!
  totalShippingFee: Int!
  totalUsedPointAmount: Int!
  updatedAt: DateTime!
  user: User
  userId: Float
  vbankInfo: OrderVbankReceipt
  withdrawnAt: DateTime
}

type OrderBuyer {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  phoneNumber: String!
  updatedAt: DateTime!
}

type OrderItem {
  Order: Order!
  brandNameKor: String!
  cancelRequestedAt: DateTime
  cancelledAt: DateTime
  claimStatus: OrderItemClaimStatus
  confirmedAt: DateTime
  couponDiscountAmount: Int!
  courier: Courier
  courierId: Float
  createdAt: DateTime!
  exchangeRequestedAt: DateTime
  exchangedAt: DateTime
  id: Int!
  isConfirmed: Boolean!
  isSettled: Boolean!
  item: Item
  itemFinalPrice: Int!
  itemId: Float
  itemName: String!
  orderId: Float!
  paidAt: DateTime
  payAmount: Int!
  product: Product
  productId: Float
  productVariantName: String!
  quantity: Int!
  recommenderId: Float
  recommenderNickname: String
  referrer: User
  referrerId: Float
  refundRequestedAt: DateTime
  refundedAt: DateTime
  seller: Seller
  sellerId: Float
  settledAt: DateTime
  shipReadyAt: DateTime

  """
  예약발송 예정일
  """
  shipReservedAt: DateTime
  shippedAt: DateTime
  shippingAt: DateTime
  status: OrderItemStatus!
  trackCode: String
  updatedAt: DateTime!
  usedPointAmount: Int!
  user: User
  userId: Float
  withdrawnAt: DateTime
}

"""
주문상품 클레임상태입니다.
"""
enum OrderItemClaimStatus {
  CancelRequested
  Cancelled
  ExchangeRequested
  Exchanged
  RefundRequested
  Refunded
}

"""
주문상품 상태입니다. 클레임상태와 무관하게 handling됩니다.
"""
enum OrderItemStatus {
  Paid
  ShipPending
  ShipReady
  Shipped
  Shipping
  VbankReady
  Withdrawn
}

type OrderReceiver {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  email: String!
  id: Int!
  name: String!
  phoneNumber: String!
  postalCode: String!
  updatedAt: DateTime!
}

"""
주문 상태입니다. 클라이언트에선 거의 사용되지 않을 값입니다.
"""
enum OrderStatus {
  Paid
  VbankReady
  Withdrawn
}

type OrderVbankReceipt {
  bankCode: InicisBankCode!
  createdAt: DateTime!
  due: DateTime!
  id: Int!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
  updatedAt: DateTime!
}

input PageInput {
  limit: Int = 20
  offset: Int
  startId: Int
}

type PointEvent {
  """
  적립/사용 금액. 적립인 경우 양수, 사용인 경우 음수입니다.
  """
  amount: Int!
  content: String!
  createdAt: DateTime!
  id: Int!
  orderId: Float
  orderItemId: Float

  """
  적립/사용 이후 잔고
  """
  resultBalance: Int!
  title: String!
  type: PointType!
  updatedAt: DateTime!
  userId: Float!
}

input PointEventFilter {
  createdAtLte: DateTime
  createdAtMte: DateTime
  type: PointType
  userId: Int
}

"""
포인트 분류입니다. 적립(Add), 사용(Sub)
"""
enum PointType {
  Add
  Sub
}

type Product {
  createdAt: DateTime!
  id: Int!
  item: Item!
  itemOptionValues: [ItemOptionValue!]!
  shippingReservePolicy: ProductShippingReservePolicy
  stock: Int!

  """
  이 Product의 stock이 0이면 예약배송정책의 stock을 반환합니다.
  """
  stockThreshold: Float!
  updatedAt: DateTime!
}

type ProductShippingReservePolicy {
  createdAt: DateTime!

  """
  예약발송 예정일
  """
  estimatedShippingBegginDate: DateTime!
  id: Int!

  """
  예약설정된 재고. 예약발송일이 되면, 예약발송 상태는 자동으로 종료되며, 잔여 예약발송 재고는 일반 재고에 합산됩니다.
  """
  stock: Int!
  updatedAt: DateTime!
}

type Query {
  brand(id: Int!): Brand!
  brands: [Brand!]!

  """
  중복이면 true, 아니면 false를 반환한다.
  """
  checkNicknameDuplicate(nickname: String!): Boolean!
  courier(id: Int!): Courier!
  couriers: [Courier!]!
  genRandomNickname: String!
  item(id: Int!): Item!
  itemCategoryTree: [ItemCategory!]!
  itemMajorCategories: [ItemCategory!]!
  itemMinorCategories: [ItemCategory!]!
  items(itemFilter: ItemFilter, pageInput: PageInput): [Item!]!
  loginByCode(loginByCodeInput: LoginByCodeInput!): JwtToken!
  loginByOauth(loginByOauthInput: LoginByOauthInput!): JwtToken!
  loginWithApple(getAppleProviderIdInput: LoginWithAppleInput!): JwtToken!
  me: User!
  meSeller: Seller!
  myCart: Cart!
  myCartItemsCount: Int!
  myCoupons: [Coupon!]!
  myExpectedPointEvents(
    pageInput: PageInput
    pointEventFilter: PointEventFilter
  ): [PointEvent!]!

  """
  Bearer token을 받아 JwtPayload를 반환합니다.
  """
  myJwtPayload: JwtPayload!
  myPointEvents(
    pageInput: PageInput
    pointEventFilter: PointEventFilter
  ): [PointEvent!]!
  myShippingAddress(id: Int!): ShippingAddress!
  myShippingAddresses: [ShippingAddress!]!

  """
  refresh token을 받아서 새로운 JwtToken을 생성합니다.
  """
  refreshJwtToken: JwtToken!
  seller(id: Int!): Seller!
  sellers(pageInput: PageInput, sellerFilter: SellerFilter): [Seller!]!
  user(id: Int!): User!
  users: [User!]!
}

"""
가상계좌 결제시 환불 받을 계좌 정보
"""
type RefundAccount {
  bankCode: InicisBankCode!
  createdAt: DateTime!
  id: Int!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
  updatedAt: DateTime!
}

type SaleStrategy {
  canUseCoupon: Boolean!
  canUseMileage: Boolean!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

type Seller {
  brand: Brand!
  brandId: Int
  businessCode: String!
  businessName: String!
  claimPolicy: SellerClaimPolicy!
  courier: Courier!
  courierId: Int
  crawlPolicy: SellerCrawlPolicy!
  crawlStrategy: SellerCrawlStrategy!
  createdAt: DateTime!
  csNotiPhoneNumber: String
  email: String!
  id: Int!
  kakaoTalkCode: String
  mailOrderBusinessCode: String!
  operationTimeMessage: String!
  orderNotiPhoneNumber: String
  phoneNumber: String!
  representativeName: String!
  returnAddress: SellerReturnAddress!
  saleStrategy: SaleStrategy!
  settlePolicy: SellerSettlePolicy
  shippingPolicy: SellerShippingPolicy!
  updatedAt: DateTime!
  user: User!
  userId: Int
}

"""
교환배송비 지불 계좌
"""
type SellerClaimAccount {
  bankCode: InicisBankCode!
  createdAt: DateTime!
  id: Int!

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String!
  ownerName: String!
  updatedAt: DateTime!
}

type SellerClaimPolicy {
  account: SellerClaimAccount
  createdAt: DateTime!
  fee: Int!
  feePayMethod: ClaimFeePayMethod!
  id: Int!

  """
  담당자 번호
  """
  phoneNumber: String!

  """
  담당자 이름
  """
  picName: String!
  updatedAt: DateTime!
}

type SellerCrawlPolicy {
  createdAt: DateTime!
  id: Int!
  isInspectingNew: Boolean!
  isUpdatingItems: Boolean!
  updatedAt: DateTime!
}

type SellerCrawlStrategy {
  baseUrl: String!
  codeRegex: String!
  createdAt: DateTime!
  id: Int!
  itemsSelector: String!
  pageParam: String
  pagination: Boolean!

  """
  '<>'으로 join된 상태다.
  """
  startPathNamesJoin: String!
  updatedAt: DateTime!
}

input SellerFilter {
  businessCode: String
  kakaoTalkCodeIn: [String!]
  search: String
}

type SellerReturnAddress {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  id: Int!
  postalCode: String!
  updatedAt: DateTime!
}

type SellerSettlePolicy {
  """
  정산 받을 계좌
  """
  account: SellerClaimAccount!
  createdAt: DateTime!

  """
  세금계산서 수령이메일
  """
  email: String!
  id: Int!

  """
  담당자 번호
  """
  phoneNumber: String!
  picName: String!

  """
  정산율
  """
  rate: Int!
  updatedAt: DateTime!
}

type SellerShippingPolicy {
  createdAt: DateTime!
  fee: Int!
  id: Int!
  minimumAmountForFree: Int!
  updatedAt: DateTime!
}

type ShippingAddress {
  baseAddress: String!
  createdAt: DateTime!
  detailAddress: String!
  id: Int!
  isPrimary: Boolean!
  name: String!
  phoneNumber1: String!
  phoneNumber2: String
  postalCode: String!
  receiverName: String!
  updatedAt: DateTime!
  userId: Int!
}

"""
Date type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateBrandInput {
  description: String
  imageUrl: String
  nameEng: String
  nameKor: String
}

input UpdateCartItemInput {
  quantity: Int!
}

input UpdateCourierInput {
  code: String
  name: String
  phoneNumber: String
  returnReserveUrl: String
}

input UpdateCourierIssueInput {
  endAt: DateTime!
  message: String!
}

input UpdateItemInput {
  description: String
  imageUrl: String
  isInfiniteStock: Boolean = true
  majorCategoryId: Float
  minorCategoryId: Float
  name: String
}

input UpdateItemNoticeInput {
  endAt: DateTime
  message: String
  startAt: DateTime
  type: ItemNoticeType
}

input UpdateItemOptionInput {
  name: String!
}

input UpdateItemPriceInput {
  displayPrice: Float
  endAt: DateTime
  isCrawlUpdating: Boolean
  originalPrice: Int
  pickkDiscountAmount: Int
  pickkDiscountRate: Int
  sellPrice: Int
  startAt: DateTime
  unit: ItemPriceUnit
}

input UpdateItemSizeChartInput {
  accDepth: Float
  accHeight: Float
  accWidth: Float
  chestWidth: Float
  crossStrapLength: Float
  glassBridgeLength: Float
  glassLegLength: Float
  glassWidth: Float
  hemWidth: Float
  id: Int
  name: String!
  riseHeight: Float
  shoulderWidth: Float
  sleeveLength: Float
  thighWidth: Float
  totalLength: Float
  waistWidth: Float
  watchBandDepth: Float
}

input UpdateProductInput {
  stock: Int!
}

input UpdateRefundAccountInput {
  bankCode: InicisBankCode

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String
  ownerName: String
}

input UpdateSellerClaimAccountInput {
  bankCode: InicisBankCode

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String
  ownerName: String
}

input UpdateSellerClaimPolicyInput {
  accountInput: UpdateSellerClaimAccountInput
  fee: Int
  feePayMethod: ClaimFeePayMethod

  """
  담당자 번호
  """
  phoneNumber: String

  """
  담당자 이름
  """
  picName: String
}

input UpdateSellerCrawlPolicyInput {
  isInspectingNew: Boolean
  isUpdatingItems: Boolean
}

input UpdateSellerInput {
  businessCode: String
  businessName: String
  csNotiPhoneNumber: String
  email: String
  kakaoTalkCode: String
  mailOrderBusinessCode: String
  operationTimeMessage: String
  orderNotiPhoneNumber: String
  phoneNumber: String
  representativeName: String
}

input UpdateSellerReturnAddressInput {
  baseAddress: String
  detailAddress: String
  postalCode: String
}

input UpdateSellerSettleAccountInput {
  bankCode: InicisBankCode

  """
  계좌번호입니다.("-" 제외) 최대 14자까지 입력 가능합니다.
  """
  number: String
  ownerName: String
}

input UpdateSellerSettlePolicyInput {
  accountInput: UpdateSellerSettleAccountInput

  """
  세금계산서 수령이메일
  """
  email: String

  """
  담당자 번호
  """
  phoneNumber: String
  picName: String

  """
  정산율
  """
  rate: Int
}

input UpdateSellerShippingPolicyInput {
  fee: Int
  minimumAmountForFree: Int
}

input UpdateShippingAddressInput {
  baseAddress: String
  detailAddress: String
  isPrimary: Boolean
  name: String
  phoneNumber1: String
  phoneNumber2: String
  postalCode: String
  receiverName: String
  userId: Int
}

input UpdateUserInput {
  code: String
  email: String
  height: Int
  name: String
  nickname: String
  weight: Int
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UploadMultipleImageInput {
  files: [Upload!]!
}

input UploadSingleImageInput {
  file: Upload!
}

type User {
  """
  [ResolveField] 사용가능 포인트 잔고
  """
  availablePoint: Int!
  avatarImage: UserAvatarImage
  code: String
  createdAt: DateTime!
  email: String

  """
  [ResolveField] 적립예정 포인트 잔고
  """
  expectedPoint: Int!
  height: Int
  id: Int!
  name: String
  nickname: String!
  oauthCode: String
  oauthProvider: UserProviderType
  refundAccount: RefundAccount
  role: UserRole
  shippingAddresses: [ShippingAddress!]
  updatedAt: DateTime!
  weight: Int
}

type UserAvatarImage {
  angle: Int!
  createdAt: DateTime!
  key: String!
  url: String!
}

"""
Oauth 제공 서비스입니다.
"""
enum UserProviderType {
  Apple
  Facebook
  Kakao
}

"""
유저의 역할/권한을 나타냅니다. User->Editor->Seller->Admin 순으로 계층 구조입니다.
"""
enum UserRole {
  Admin
  Editor
  Seller
  User
}
