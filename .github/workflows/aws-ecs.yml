# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  release:
    types: [created]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Apply production env vars
        run: cp .env.prod .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECS_SECERET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pickk-server
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "docker build succeed"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: pickk-server
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: pickk-server-service
          cluster: pickk-server-cluster
          wait-for-service-stability: true
          force-new-deployment: true

      - name: Notify to slack (SUCCEED)
        if: steps.deploy.outcome == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            { 
              text: ":+1: Great! Execution Succeed",
              attachments: [{
                color: '#58A459',
                author_name: `${process.env.GITHUB_ACTOR}`,
                author_link: `https://github.com/${process.env.GITHUB_ACTOR}`,
                author_icon: `https://github.com/${process.env.GITHUB_ACTOR}.png`,
                title: `Server deployed (@pickk/server)\n${process.env.AS_WORKFLOW}\nby ${process.env.AS_COMMIT} of ${process.env.AS_REPO}`,
                footer: `${process.env.AS_REPO} took ${process.env.AS_TOOK}`
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify to slack (FAILED)
        if: steps.deploy.outcome != 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            { 
              text: ":cry: Uh oh, Looks like there was an error",
              attachments: [{
                color: "#B73537",
                author_name: `${process.env.GITHUB_ACTOR}`,
                author_link: `https://github.com/${process.env.GITHUB_ACTOR}`,
                author_icon: `https://github.com/${process.env.GITHUB_ACTOR}.png`,
                title: `Server Deploy Failed (@pickk/server)\n${process.env.AS_WORKFLOW}\nby ${process.env.AS_COMMIT} of ${process.env.AS_REPO}`,
                footer: `${process.env.AS_REPO} took ${process.env.AS_TOOK}`
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
